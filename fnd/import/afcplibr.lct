#
# $Header: afcplibr.lct 120.1.12010000.2 2009/09/22 20:34:53 smadhapp ship $
#
# <filename>.lct - <Entity description> Loader Configuration
#
# Entities -
#
#   LIBRARY 
#
#
# -- DEFINE SECTION --
#
#   Use this section to specify the structure of the entities.
#
#   ID column values are not portable.  Use an equivalent text value instead.
#   For example, use APPLICATION_SHORT_NAME instead of APPLICATION_ID.
# 
#   DATE and NUMBER datatypes should be defined and stored as VARCHAR2(11)
#   and VARCHAR2(50), respectively.
#
#   The OWNER field is used to store and determine the values of the 
#   "WHO" columns.
#
COMMENT = "dbdrv: exec fnd bin FNDLOAD bin &phase=daa+54 checkfile:~PROD:~PATH:~FILE &ui_apps 0 Y UPLOAD @FND:patch/115/import/afcplibr.lct @~PROD:~PATH/~FILE" 
DEFINE LIBRARY
  KEY   CONCURRENT_PROCESSOR_NAME VARCHAR2(8)
  KEY   APPLICATION_SHORT_NAME  VARCHAR2(50)
  CTX   OWNER          		VARCHAR2(4000)
  CTX   LAST_UPDATE_DATE        VARCHAR2(11)
  TRANS DESCRIPTION      	VARCHAR2(240)
  BASE  LAST_REBUILT            VARCHAR2(241)
  BASE  LIBRARY_TYPE            VARCHAR2(1)
END LIBRARY 

#
# -- DOWNLOAD SECTION --
#
#   For each entity, specify the SQL statement to use to flesh out
#   its entity definition.  SELECT columns must be in same order and
#   datatype as the entity's attributes as defined above.
#
#   Convert dates to varchar2 using:
#    	to_char(sysdate, 'DD/MM/YYYY')
#
#   Wrap parameter values with nvl() to support null parameter passing
#

DOWNLOAD LIBRARY
"select v.CONCURRENT_PROCESSOR_NAME,
  	  a.APPLICATION_SHORT_NAME,
	  fnd_load_util.owner_name(v.LAST_UPDATED_BY) OWNER,
          to_char(v.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
          v.DESCRIPTION,
          v.LAST_REBUILT,
          v.LIBRARY_TYPE
  from   fnd_concurrent_processors v, fnd_application,
	  fnd_application a
	  where ((:CONCURRENT_PROCESSOR_NAME is null) or
                 ((:CONCURRENT_PROCESSOR_NAME is not null) and
                 (v.CONCURRENT_PROCESSOR_NAME like :CONCURRENT_PROCESSOR_NAME)))
   and          ((:APPLICATION_SHORT_NAME is null) or
                 ((:APPLICATION_SHORT_NAME is not null) and
                  (a.APPLICATION_SHORT_NAME like :APPLICATION_SHORT_NAME)))
   and 	  a.APPLICATION_ID = v.APPLICATION_ID "


#
# -- UPLOAD section -- 
# 
#   For each entity, specify the pl/sql block to use to upload the 
#   entity into the database.  Bind names must match DEFINE attribute names.
#   If the relevant tables have table handlers defined, use the LOAD_ROW
#   procedure.
#   
#   Non-leaf entities must include the BEGIN keyword.
#
#   Child entities may use bind names from their parents' definitions.
# 
#   Use command line parameters to control branching between desired behavior.
#   For example, in the upload statement below, we use the parameter
#   UPLOAD_MODE to specify whether we are doing a regular upload or a
#   special upload of translated columns.
#

UPLOAD LIBRARY 
  " begin  
     declare
      app_id   number := 0;
      f_luby   number := 0;  -- entity owner in file
      f_ludate  date;        -- entity update date in file
      db_luby   number;      -- entity owner in db
      db_ludate date;        -- entity update date in db
      l_meaning   varchar2(80);

     begin
      select application_id into app_id
      from   fnd_application
      where  application_short_name = :APPLICATION_SHORT_NAME;

      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.owner_id(:OWNER);

      -- Translate char last_update_date to date
      f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

      if (:UPLOAD_MODE = 'NLS') then
        begin
	   select last_update_date, last_updated_by
           into db_ludate, db_luby
           from fnd_concurrent_processors
      	   where application_id = app_id
           and   CONCURRENT_PROCESSOR_NAME = :CONCURRENT_PROCESSOR_NAME
           and userenv('LANG') =
           (Select language_code from FND_LANGUAGES where installed_flag = 'B');

           -- Fix for bug 8805359
           if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                         db_ludate, :CUSTOM_MODE))
           then
           update fnd_concurrent_processors set
           DESCRIPTION = nvl(:DESCRIPTION, DESCRIPTION),
             last_updated_by   = f_luby,
             last_update_date  = f_ludate,
             last_update_login = 0
           where application_id = app_id
           and   CONCURRENT_PROCESSOR_NAME = :CONCURRENT_PROCESSOR_NAME
           and userenv('LANG') = 
            (Select language_code from FND_LANGUAGES where installed_flag = 'B');
        end if;
    	exception
          when no_data_found then
               null;
        end;
      else
	begin
		select last_update_date, last_updated_by
      		into db_ludate, db_luby
	      	from fnd_concurrent_processors
      		where application_id = app_id
        	and   CONCURRENT_PROCESSOR_NAME = :CONCURRENT_PROCESSOR_NAME;

	        -- Fix for bug 8805359
	        if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                         db_ludate, :CUSTOM_MODE))
	       	then
	        update fnd_concurrent_processors set
        	DESCRIPTION = nvl(:DESCRIPTION, DESCRIPTION),
	          last_updated_by   = f_luby,
        	  last_update_date  = f_ludate,
	          last_update_login = 0
        	where application_id = app_id
	        and   CONCURRENT_PROCESSOR_NAME = :CONCURRENT_PROCESSOR_NAME;
        	end if;
	
    	exception
          when no_data_found then

           if (:OWNER = 'SEED') then fnd_manager.set_session_mode('seed_data');
           else fnd_manager.set_session_mode('customer_data');
           end if;
		select meaning
		  into l_meaning
		  from fnd_lookups
		 where lookup_type = 'CP_PROGRAM_LIBRARY_TYPE'
		   and lookup_code = :LIBRARY_TYPE;

		fnd_manager.create_library(:CONCURRENT_PROCESSOR_NAME,
				   :APPLICATION_SHORT_NAME,
				   :DESCRIPTION,
				   l_meaning);
	end;

      end if;

     end;
    end; "
