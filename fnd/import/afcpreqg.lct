#
# $Header: afcpreqg.lct 120.0.12010000.1 2008/07/25 13:39:48 appldev ship $
#
# <filename>.lct - <Entity description> Loader Configuration
#
# Entities -
#
#   REQUEST_GROUP
#
#
# -- DEFINE SECTION --
#
#   Use this section to specify the structure of the entities.
#
#   ID column values are not portable.  Use an equivalent text value instead.
#   For example, use APPLICATION_SHORT_NAME instead of APPLICATION_ID.
# 
#   DATE and NUMBER datatypes should be defined and stored as VARCHAR2(11)
#   and VARCHAR2(50), respectively.
#
#   The OWNER field is used to store and determine the values of the 
#   "WHO" columns.
#
COMMENT = "dbdrv: exec fnd bin FNDLOAD bin &phase=daa+66 checkfile:~PROD:~PATH:~FILE &ui_apps 0 Y UPLOAD @FND:patch/115/import/afcpreqg.lct @~PROD:~PATH/~FILE" 
DEFINE REQUEST_GROUP
  KEY   REQUEST_GROUP_NAME      VARCHAR2(30)
  KEY   APPLICATION_SHORT_NAME  VARCHAR2(50)
  CTX   OWNER          		VARCHAR2(4000)
  BASE  LAST_UPDATE_DATE        VARCHAR2(75)
  TRANS DESCRIPTION      	VARCHAR2(80)
  BASE  REQUEST_GROUP_CODE      VARCHAR2(30)

  DEFINE REQUEST_GROUP_UNIT
    KEY   UNIT_TYPE               VARCHAR2(1)
    KEY   UNIT_APP		  VARCHAR2(50)
    KEY   UNIT_NAME		  VARCHAR2(255)
    CTX   OWNER                   VARCHAR2(4000)
    BASE  LAST_UPDATE_DATE        VARCHAR2(75)
  END REQUEST_GROUP_UNIT

END REQUEST_GROUP

#
# -- DOWNLOAD SECTION --
#
#   For each entity, specify the SQL statement to use to flesh out
#   its entity definition.  SELECT columns must be in same order and
#   datatype as the entity's attributes as defined above.
#
#   Convert dates to varchar2 using:
#    	to_char(sysdate, 'DD/MM/YYYY')
#
#   Wrap parameter values with nvl() to support null parameter passing
#

DOWNLOAD REQUEST_GROUP 
  "select v.REQUEST_GROUP_NAME,
  	  a.APPLICATION_SHORT_NAME,
          fnd_load_util.OWNER_NAME(v.LAST_UPDATED_BY) OWNER,  
	  to_char(v.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
          v.DESCRIPTION,
          v.REQUEST_GROUP_CODE
  from   fnd_request_groups v, 
	  fnd_application a
           where ((:REQUEST_GROUP_NAME is null) or
                 ((:REQUEST_GROUP_NAME is not null) and
                  (v.REQUEST_GROUP_NAME like :REQUEST_GROUP_NAME)))
   and          ((:APPLICATION_SHORT_NAME is null) or
                 ((:APPLICATION_SHORT_NAME is not null) and
                  (a.APPLICATION_SHORT_NAME like :APPLICATION_SHORT_NAME)))
   and 	  a.APPLICATION_ID = v.APPLICATION_ID "

DOWNLOAD REQUEST_GROUP_UNIT
  "select V.REQUEST_UNIT_TYPE UNIT_TYPE,
          A.APPLICATION_SHORT_NAME UNIT_APP,
          DECODE(REQUEST_UNIT_TYPE, 'P', P.CONCURRENT_PROGRAM_NAME, 
			 	    'S', S.REQUEST_SET_NAME,
				    'A', A.APPLICATION_SHORT_NAME,
				    NULL) UNIT_NAME,
	  fnd_load_util.OWNER_NAME(V.LAST_UPDATED_BY) OWNER,
	  to_char(v.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE
   from FND_APPLICATION VA,
	FND_APPLICATION A,
	FND_CONCURRENT_PROGRAMS P,
	FND_REQUEST_SETS S,
	FND_REQUEST_GROUP_UNITS V,
        FND_REQUEST_GROUPS G    
   where VA.APPLICATION_SHORT_NAME = :APPLICATION_SHORT_NAME
     and G.REQUEST_GROUP_NAME = :REQUEST_GROUP_NAME
     and G.APPLICATION_ID = VA.APPLICATION_ID
     and V.APPLICATION_ID = G.APPLICATION_ID
     and V.REQUEST_GROUP_ID = G.REQUEST_GROUP_ID
     and ((:UNIT_APP is null) or
          ((:UNIT_APP is not null) and
           (A.APPLICATION_SHORT_NAME like :UNIT_APP)))
     and A.APPLICATION_ID = V.UNIT_APPLICATION_ID
     AND DECODE(V.REQUEST_UNIT_TYPE,'P', V.REQUEST_UNIT_ID, NULL)
	 = P.CONCURRENT_PROGRAM_ID (+)
     AND DECODE(V.REQUEST_UNIT_TYPE,'S', V.REQUEST_UNIT_ID, NULL)
          = S.REQUEST_SET_ID (+)
     AND V.UNIT_APPLICATION_ID = P.APPLICATION_ID (+)
     AND V.UNIT_APPLICATION_ID = S.APPLICATION_ID (+)
     AND (   (V.REQUEST_UNIT_TYPE = 'P' AND
              V.REQUEST_UNIT_ID = P.CONCURRENT_PROGRAM_ID) 
          OR (V.REQUEST_UNIT_TYPE = 'S' AND
              V.REQUEST_UNIT_ID = S.REQUEST_SET_ID)
          OR  V.REQUEST_UNIT_TYPE NOT IN ('S','P')   )
     AND ((:UNIT_TYPE  is null) or
          ((:UNIT_TYPE is not null) and
           (V.REQUEST_UNIT_TYPE like :UNIT_TYPE)))
     AND P.CONCURRENT_PROGRAM_NAME (+) like NVL(:UNIT_NAME,'%')
     AND S.REQUEST_SET_NAME (+) like NVL(:UNIT_NAME,'%') "


#
# -- UPLOAD section -- 
# 
#   For each entity, specify the pl/sql block to use to upload the 
#   entity into the database.  Bind names must match DEFINE attribute names.
#   If the relevant tables have table handlers defined, use the LOAD_ROW
#   procedure.
#   
#   Non-leaf entities must include the BEGIN keyword.
#
#   Child entities may use bind names from their parents' definitions.
# 
#   Use command line parameters to control branching between desired behavior.
#   For example, in the upload statement below, we use the parameter
#   UPLOAD_MODE to specify whether we are doing a regular upload or a
#   special upload of translated columns.
#

UPLOAD REQUEST_GROUP 
BEGIN
  "begin  
     declare
      chgdb     boolean := false;  -- true if DB should change
      app_id    number := 0;
      f_luby    number;  -- entity owner in file
      f_ludate  date;    -- entity update date in file
      db_luby   number;  -- entity owner in db
      db_ludate date;    -- entity update date in db

     begin
      
      select application_id into app_id
      from   fnd_application
      where  application_short_name = :APPLICATION_SHORT_NAME;

      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.OWNER_ID(:OWNER);
 
      -- Translate char last_update_date to date
      f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

      begin
        select LAST_UPDATED_BY, LAST_UPDATE_DATE
        into db_luby, db_ludate
        from FND_REQUEST_GROUPS
        where APPLICATION_ID = app_id
        and   REQUEST_GROUP_NAME = :REQUEST_GROUP_NAME;

        -- Update record, honoring customization mode.
        -- Record should be updated only if:
        -- a. CUSTOM_MODE = FORCE, or
        -- b. file owner is CUSTOM, db owner is SEED
        -- c. owners are the same, and file_date > db_date

        if (fnd_load_util.UPLOAD_TEST(
                p_file_id     => f_luby,
                p_file_lud    => f_ludate,
                p_db_id       => db_luby, 
                p_db_lud      => db_ludate, 
                p_custom_mode => :CUSTOM_MODE))
	then
	  chgdb := true;
	end if;

      exception
        when no_data_found then
	    chgdb := true;  -- change is needed if no matching db rows
      end;

      if not chgdb then 
	return;
      
      elsif (:UPLOAD_MODE = 'NLS') then
        update fnd_request_groups set
          DESCRIPTION = :DESCRIPTION,
          last_updated_by   = f_luby,
          last_update_date  = f_ludate,
          last_update_login = 0
        where application_id = app_id
        and   REQUEST_GROUP_NAME = :REQUEST_GROUP_NAME
  	and userenv('LANG') = 
		(select language_code 
		from FND_LANGUAGES 
		where installed_flag = 'B');
      else
        delete from fnd_request_group_units u
        where u.application_id = app_id
        and :CHILD_DELETE_MODE = 'TRUE'
	and u.request_group_id in 
		(select v.request_group_id
		 from fnd_request_groups v
		 where REQUEST_GROUP_NAME = :REQUEST_GROUP_NAME
		 and v.application_id = app_id);
 
        update fnd_request_groups set
          DESCRIPTION = :DESCRIPTION,
          REQUEST_GROUP_CODE = :REQUEST_GROUP_CODE,
          LAST_UPDATED_BY   = f_luby,
          LAST_UPDATE_DATE  = f_ludate,
          LAST_UPDATE_LOGIN = 0
        where application_id = app_id
        and   REQUEST_GROUP_NAME = :REQUEST_GROUP_NAME;

        if (SQL%NOTFOUND) then		 
          insert into fnd_request_groups
            (REQUEST_GROUP_NAME, REQUEST_GROUP_ID, 
	    APPLICATION_ID, DESCRIPTION, REQUEST_GROUP_CODE, 
	    LAST_UPDATED_BY, LAST_UPDATE_DATE, LAST_UPDATE_LOGIN, 
	    CREATION_DATE, CREATED_BY) 
            (select :REQUEST_GROUP_NAME, FND_REQUEST_GROUPS_S.nextval, 
		app_id, :DESCRIPTION, :REQUEST_GROUP_CODE,
                f_luby, f_ludate, 0, 
                f_ludate, f_luby
             from dual);
	end if;
      end if;
     end;
   end; "

UPLOAD REQUEST_GROUP_UNIT
  "begin 
     declare
      app_id   number := 0;
      app_id2  number := 0;
      key_id   number := 0;
      key_id2   number := 0;
      chgdb     boolean := false;  -- true if DB should change
      f_luby    number;  -- entity owner in file
      f_ludate  date;    -- entity update date in file
      db_luby   number;  -- entity owner in db
      db_ludate date;    -- entity update date in db

    begin
      if (:UPLOAD_MODE = 'NLS') then
        return;
      end if;

      select application_id into app_id
      from   fnd_application
      where  application_short_name = :APPLICATION_SHORT_NAME;

      select application_id into app_id2
      from   fnd_application
      where  application_short_name = :UNIT_APP;

      select request_group_id into key_id
      from fnd_request_groups
      where REQUEST_GROUP_NAME = :REQUEST_GROUP_NAME
      and application_id = app_id;

      if ((:UNIT_NAME is null) AND (:UNIT_TYPE <> 'A')) then
         fnd_message.set_name('FND','GENERIC-INTERNAL ERROR');
         fnd_message.set_token('REASON',
                'Error- Parameter UNIT_NAME must not be null.');
         app_exception.raise_exception;
      end if;

      begin
        if :UNIT_TYPE = 'P' then
  	  select concurrent_program_id into key_id2
  	  from fnd_concurrent_programs 
  	  where concurrent_program_name = :UNIT_NAME
  	  and application_id = app_id2;
        elsif :UNIT_TYPE = 'S' then
  	  select REQUEST_SET_ID into key_id2
  	  from fnd_REQUEST_SETS
  	  where REQUEST_SET_NAME = :UNIT_NAME
  	  and APPLICATION_ID = app_id2;
        else key_id2 := app_id2;
        end if;
      exception
        when no_data_found then
          return;
      end;

      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.OWNER_ID(:OWNER);
 
      -- Translate char last_update_date to date
      f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

      begin
        select LAST_UPDATED_BY, LAST_UPDATE_DATE
        into db_luby, db_ludate
	from FND_REQUEST_GROUP_UNITS
	where APPLICATION_ID = app_id
	and REQUEST_GROUP_ID = key_id
	and REQUEST_UNIT_TYPE = :UNIT_TYPE
	and UNIT_APPLICATION_ID = app_id2
	and ((:UNIT_TYPE = 'A') or (REQUEST_UNIT_ID = key_id2));

        -- Update record, honoring customization mode.
        if (fnd_load_util.UPLOAD_TEST(        
              p_file_id     => f_luby,
              p_file_lud    => f_ludate,
              p_db_id       => db_luby, 
              p_db_lud      => db_ludate, 
              p_custom_mode => :CUSTOM_MODE))
	then
	  chgdb := true;
	end if;

      exception
        when no_data_found then
	    chgdb := true;  -- change is needed if no matching db rows
      end;
		
      if not chgdb then 
	return;
      else
	Delete from fnd_request_group_units
	  where APPLICATION_ID = app_id
	  and REQUEST_GROUP_ID = key_id
	  and REQUEST_UNIT_TYPE = :UNIT_TYPE
	  and UNIT_APPLICATION_ID = app_id2
	  and ((:UNIT_TYPE = 'A') OR (REQUEST_UNIT_ID = key_id2))
	  and exists (select 1 
		        from fnd_request_group_units x
			where x.APPLICATION_ID = app_id
			  and x.REQUEST_GROUP_ID = key_id
			  and x.REQUEST_UNIT_TYPE = :UNIT_TYPE
			  and x.UNIT_APPLICATION_ID = app_id2
			  and ((:UNIT_TYPE = 'A') 
				OR (x.REQUEST_UNIT_ID = key_id2)));
 
	  insert into fnd_request_group_units
		(APPLICATION_ID, REQUEST_GROUP_ID, REQUEST_UNIT_TYPE, 
		 UNIT_APPLICATION_ID, REQUEST_UNIT_ID, LAST_UPDATE_DATE,
		 LAST_UPDATED_BY, CREATION_DATE, CREATED_BY, LAST_UPDATE_LOGIN)
	     Select app_id, key_id, :UNIT_TYPE, app_id2, key_id2, f_ludate,
		 f_luby, f_ludate, f_luby, 0 from dual; 
      end if;
    end;
  end;"
