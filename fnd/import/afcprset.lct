#
# $Header: afcprset.lct 120.2.12010000.1 2008/07/25 13:39:49 appldev ship $
#
# <filename>.lct - <Entity description> Loader Configuration
#
# All the required Concurrent Program definitions should exist before loading
# Request set.
#
# Request set loaders is devided into two passes.
# For NLS only mode run pass 1, pass 2 is not required.
#
# Pass 1 : 
#    Download/Upload the Request Set definition it self.
#    Use entity name REQ_SET.
#        Parameters : APPLICATION_SHORT_NAME
#		      REQUEST_SET_NAME
#
# Pass 2 :
#    Download/Upload the Request Set Stage links.
#    Use entity name REQ_SET_LINKS
#        Parameters : APPLICATION_SHORT_NAME
#		      REQUEST_SET_NAME
#
# Entities -
#
#    REQ_SET 
#         |   
#          --STAGE
#                |
#                 --STAGE_PROGS
#                             |
#                              --PROG_ARGS
#
#    REQ_SET_LINKS
#               |
#                -- STAGE_LINKS
#
# -- DEFINE SECTION --
#
#   Use this section to specify the structure of the entities.
#
#   ID column values are not portable.  Use an equivalent text value instead.
#   For example, use APPLICATION_SHORT_NAME instead of APPLICATION_ID.
# 
#   DATE and NUMBER datatypes should be defined and stored as VARCHAR2(11)
#   and VARCHAR2(50), respectively.
#
#   The OWNER field is used to store and determine the values of the 
#   "WHO" columns.
#
COMMENT = "dbdrv: exec fnd bin FNDLOAD bin &phase=daa+64 checkfile:~PROD:~PATH:~FILE &ui_apps 0 Y UPLOAD @FND:patch/115/import/afcprset.lct @~PROD:~PATH/~FILE"
DEFINE REQ_SET
 KEY   APPLICATION_SHORT_NAME   VARCHAR2(50)
 KEY   REQUEST_SET_NAME         VARCHAR2(30)
 CTX   OWNER                    VARCHAR2(4000)
 BASE  ALLOW_CONSTRAINTS_FLAG   VARCHAR2(1)
 BASE  PRINT_TOGETHER_FLAG      VARCHAR2(1)
 BASE  START_DATE_ACTIVE        VARCHAR2(11)
 BASE  START_STAGE_NAME         VARCHAR2(30)
 BASE  END_DATE_ACTIVE          VARCHAR2(11)
 BASE  CONCURRENT_PROGRAM_NAME  VARCHAR2(30)
 BASE  OWNER_USER_NAME          VARCHAR2(100)
 BASE  PRINTER                  VARCHAR2(30)
 BASE  PRINT_STYLE              VARCHAR2(30)
 TRANS USER_REQUEST_SET_NAME    VARCHAR2(240)
 TRANS DESCRIPTION              VARCHAR2(240)
 BASE  LAST_UPDATE_DATE         VARCHAR2(10)

#  CHILD_ENTITY is a child of ENTITY.  Show this relationship by nesting
#  its definition inside that of its parent.  The child automatically
#  inherits the key fields of its parent and they should not be duplicated in
#  the child's definition even though the actual underlying data model
#  may have columns for those key values.

  DEFINE STAGE
   KEY   STAGE_NAME               VARCHAR2(30)
   CTX   OWNER                    VARCHAR2(4000)
   BASE  CRITICAL                 VARCHAR2(1)
   BASE  OUTCOME                  VARCHAR2(1)
   BASE  ALLOW_CONSTRAINTS_FLAG   VARCHAR2(1)
   BASE  DISPLAY_SEQUENCE         VARCHAR2(50)
   BASE  FUNCTION_APPLICATION     VARCHAR2(50)
   BASE  FUNCTION                 VARCHAR2(30)
   BASE  SUCCESS_LINK             VARCHAR2(30)
   BASE  WARNING_LINK             VARCHAR2(30)
   BASE  ERROR_LINK               VARCHAR2(30)
   BASE  CONCURRENT_PROGRAM_NAME  VARCHAR2(30)
   TRANS USER_STAGE_NAME          VARCHAR2(240)
   TRANS DESCRIPTION              VARCHAR2(240)
   BASE LAST_UPDATE_DATE          VARCHAR2(10)

     DEFINE STAGE_PROG
      KEY   SEQUENCE              VARCHAR2(50)
      CTX   OWNER                 VARCHAR2(4000)
      BASE  PROGRAM_APPLICATION   VARCHAR2(50)
      BASE  PROGRAM_NAME          VARCHAR2(30)
      BASE  NLS_LANGUAGE          VARCHAR2(30)
      BASE  NLS_TERRITORY         VARCHAR2(30)
      BASE  CRITICAL              VARCHAR2(1)
      BASE  NUMBER_OF_COPIES      VARCHAR2(50)
      BASE  PRINTER               VARCHAR2(30)
      BASE  PRINT_STYLE           VARCHAR2(30)
      BASE  SAVE_OUTPUT_FLAG      VARCHAR2(1)
      BASE  LAST_UPDATE_DATE      VARCHAR2(10)

        DEFINE PROG_ARGS
         KEY   DESC_FLEX_APPL     VARCHAR2(50)
	 KEY   DESC_FLEX_NAME     VARCHAR2(50)
         KEY   COL_NAME           VARCHAR2(30)
         CTX   OWNER              VARCHAR2(4000)
         BASE  DISPLAY_FLAG       VARCHAR2(1)
         BASE  INSERT_FLAG        VARCHAR2(1)
         BASE  UPDATE_FLAG        VARCHAR2(1)
         BASE  DEFAULT_TYPE       VARCHAR2(1)
         BASE  DEFAULT_VALUE      VARCHAR2(2000)
         BASE  SHARED_PARAMETER_NAME VARCHAR2(30)
         BASE  LAST_UPDATE_DATE   VARCHAR2(10)
        END PROG_ARGS
     END STAGE_PROG
  END STAGE
END REQ_SET

DEFINE REQ_SET_LINKS
 KEY   APPLICATION_SHORT_NAME   VARCHAR2(50)
 KEY   REQUEST_SET_NAME         VARCHAR2(30)
 BASE  RSET                     REFERENCES REQ_SET
# KEY   RSET_APPLICATION_SHORT_NAME   VARCHAR2(50)
# KEY   RSET_REQUEST_SET_NAME         VARCHAR2(30)
 CTX   OWNER                    VARCHAR2(4000)
 BASE  START_STAGE_NAME         VARCHAR2(30)
 BASE  LAST_UPDATE_DATE         VARCHAR2(10)

#  CHILD_ENTITY is a child of ENTITY.  Show this relationship by nesting
#  its definition inside that of its parent.  The child automatically
#  inherits the key fields of its parent and they should not be duplicated in
#  the child's definition even though the actual underlying data model
#  may have columns for those key values.

  DEFINE STAGE_LINKS
   KEY   STAGE_NAME               VARCHAR2(30)
   CTX   OWNER                    VARCHAR2(4000)
   BASE  SUCCESS_LINK             VARCHAR2(30)
   BASE  WARNING_LINK             VARCHAR2(30)
   BASE  ERROR_LINK               VARCHAR2(30)
   BASE  LAST_UPDATE_DATE         VARCHAR2(10)
  END STAGE_LINKS
END REQ_SET_LINKS
#
# -- DOWNLOAD SECTION --
#
#   For each entity, specify the SQL statement to use to flesh out
#   its entity definition.  SELECT columns must be in same order and
#   datatype as the entity's attributes as defined above.
#
#   Convert dates to varchar2 using:
#    	to_char(sysdate, 'DD/MM/YYYY')
#
#   Wrap parameter values with nvl() to support null parameter passing
#

DOWNLOAD REQ_SET 
  "select 
	a.APPLICATION_SHORT_NAME,
	v.REQUEST_SET_NAME,
	fnd_load_util.owner_name(v.LAST_UPDATED_BY) OWNER,  
	v.ALLOW_CONSTRAINTS_FLAG,
	v.PRINT_TOGETHER_FLAG,
	TO_CHAR(v.START_DATE_ACTIVE, 'YYYY/MM/DD') START_DATE_ACTIVE ,
	b2.STAGE_NAME START_STAGE_NAME,
	TO_CHAR(v.END_DATE_ACTIVE, 'YYYY/MM/DD') END_DATE_ACTIVE,
	p.CONCURRENT_PROGRAM_NAME,
	u.USER_NAME OWNER_USER_NAME,
	v.PRINTER,
	v.PRINT_STYLE,
	v.USER_REQUEST_SET_NAME,
	v.DESCRIPTION,
        to_char(v.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE
   from   fnd_request_sets_vl v, fnd_application a, 
	  fnd_concurrent_programs p, fnd_request_set_stages b2,
          fnd_user u
   where ((:REQUEST_SET_NAME is null) or
                 ((:REQUEST_SET_NAME is not null) and
                  (v.REQUEST_SET_NAME like :REQUEST_SET_NAME)))
   and          ((:APPLICATION_SHORT_NAME is null) or
                 ((:APPLICATION_SHORT_NAME is not null) and
                  (a.APPLICATION_SHORT_NAME like :APPLICATION_SHORT_NAME)))
   and    u.USER_ID (+) = v.OWNER
   and    b2.REQUEST_SET_STAGE_ID (+) = v.START_STAGE
   and    b2.set_application_id (+) = v.application_id
   and    b2.request_set_id (+) = v.request_set_id
   and    p.application_id (+) = v.application_id
   and    p.CONCURRENT_PROGRAM_ID (+) = v.CONCURRENT_PROGRAM_ID
   and    a.application_id = v.application_id "


DOWNLOAD STAGE 
  "select 
          v.STAGE_NAME,
          fnd_load_util.owner_name(v.LAST_UPDATED_BY) OWNER,  
          v.CRITICAL,
          v.OUTCOME,
   	  v.ALLOW_CONSTRAINTS_FLAG,
          v.DISPLAY_SEQUENCE,
	  ea.APPLICATION_SHORT_NAME FUNCTION_APPLICATION,
	  e.EXECUTABLE_NAME FUNCTION,
          sls.STAGE_NAME SUCCESS_LINK,
	  wls.STAGE_NAME WARNING_LINK,
	  els.STAGE_NAME ERROR_LINK,
	  p.CONCURRENT_PROGRAM_NAME,
          v.USER_STAGE_NAME,
          v.DESCRIPTION, 
          to_char(v.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE
   from   fnd_request_sets b,
          fnd_application a,
          fnd_request_set_stages_vl v,
	  fnd_application ea,
	  fnd_executables e,
	  fnd_request_set_stages sls,
	  fnd_request_set_stages wls,
	  fnd_request_set_stages els,
          fnd_concurrent_programs p
where     a.APPLICATION_SHORT_NAME = :APPLICATION_SHORT_NAME
   and    b.REQUEST_SET_NAME  = :REQUEST_SET_NAME
   and    ((:STAGE_NAME is null) or
                 ((:STAGE_NAME is not null) and
                  (v.STAGE_NAME like :STAGE_NAME)))
   and    p.CONCURRENT_PROGRAM_ID (+) = v.CONCURRENT_PROGRAM_ID
   and    p.APPLICATION_ID (+) = v.SET_APPLICATION_ID
   and    sls.REQUEST_SET_STAGE_ID (+) = v.SUCCESS_LINK
   and    sls.REQUEST_SET_ID (+) = v.REQUEST_SET_ID
   and    sls.SET_APPLICATION_ID (+) = v.SET_APPLICATION_ID
   and    wls.REQUEST_SET_STAGE_ID (+) = v.WARNING_LINK
   and    wls.REQUEST_SET_ID (+) = v.REQUEST_SET_ID
   and    wls.SET_APPLICATION_ID (+) = v.SET_APPLICATION_ID
   and    els.REQUEST_SET_STAGE_ID (+) = v.ERROR_LINK
   and    els.REQUEST_SET_ID (+) = v.REQUEST_SET_ID
   and    els.SET_APPLICATION_ID (+) = v.SET_APPLICATION_ID
   and    e.APPLICATION_ID (+) = v.FUNCTION_APPLICATION_ID
   and    e.EXECUTABLE_ID (+) = v.FUNCTION_ID
   and    ea.APPLICATION_ID (+) = v.FUNCTION_APPLICATION_ID
   and    a.APPLICATION_ID = b.APPLICATION_ID
   and    b.APPLICATION_ID = v.SET_APPLICATION_ID
   and    b.REQUEST_SET_ID = v.REQUEST_SET_ID "

DOWNLOAD STAGE_PROG
  " select
    	to_char(sp.SEQUENCE) SEQUENCE,
        fnd_load_util.owner_name(sp.LAST_UPDATED_BY) OWNER,
        a1.APPLICATION_SHORT_NAME PROGRAM_APPLICATION,
        p.CONCURRENT_PROGRAM_NAME PROGRAM_NAME,
	sp.NLS_LANGUAGE NLS_LANGUAGE,
        sp.NLS_TERRITORY NLS_TERRITORY,
        sp.CRITICAL CRITICAL,
        to_char(sp.NUMBER_OF_COPIES) NUMBER_OF_COPIES,
        sp.PRINTER PRINTER,
        sp.PRINT_STYLE PRINT_STYLE,
        sp.SAVE_OUTPUT_FLAG SAVE_OUTPUT_FLAG, 
        to_char(sp.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE
   from   fnd_request_sets b,
          fnd_application a,
          fnd_application a1,
          fnd_request_set_stages s,
          fnd_request_set_programs sp,
          fnd_concurrent_programs p
where     a.APPLICATION_SHORT_NAME = :APPLICATION_SHORT_NAME
   and    a.application_id         = b.application_id
   and    b.REQUEST_SET_NAME       = :REQUEST_SET_NAME
   and    ((:STAGE_NAME is null) or
                 ((:STAGE_NAME is not null) and
                  (s.STAGE_NAME like :STAGE_NAME)))
   and    b.request_set_id         = s.request_set_id
   and    b.application_id         = s.set_application_id
   and    p.CONCURRENT_PROGRAM_ID (+) = sp.CONCURRENT_PROGRAM_ID
   and    p.application_id (+)     = sp.program_application_id
   and    a1.application_id        = sp.program_application_id
   and    s.set_application_id     = sp.set_application_id
   and    s.request_set_id         = sp.request_set_id
   and    s.request_set_stage_id   = sp.request_set_stage_id "

DOWNLOAD PROG_ARGS
  " select
          a1.APPLICATION_SHORT_NAME DESC_FLEX_APPL,
          '$SRS$.' || p.CONCURRENT_PROGRAM_NAME DESC_FLEX_NAME,
          application_column_name COL_NAME,
          fnd_load_util.owner_name(spa.LAST_UPDATED_BY) OWNER,
          DISPLAY_FLAG,
          INSERT_FLAG,
          UPDATE_FLAG,
          DEFAULT_TYPE,
          DEFAULT_VALUE,
          SHARED_PARAMETER_NAME, 
          to_char(spa.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE
   from   fnd_request_sets b,
          fnd_application a,
          fnd_application a1,
          fnd_request_set_stages s,
          fnd_request_set_programs sp,
          fnd_request_set_program_args spa,
          fnd_concurrent_programs p
  where   a.APPLICATION_SHORT_NAME = :APPLICATION_SHORT_NAME
   and    a.application_id         = b.application_id
   and    b.REQUEST_SET_NAME       = :REQUEST_SET_NAME
   and    ((:STAGE_NAME is null) or
                 ((:STAGE_NAME is not null) and
                  (s.STAGE_NAME like :STAGE_NAME)))
   and    sp.SEQUENCE              = :SEQUENCE
   and    sp.request_set_program_id = spa.request_set_program_id
   and    b.request_set_id         = s.request_set_id
   and    b.application_id         = s.set_application_id
   and    p.CONCURRENT_PROGRAM_ID (+) = sp.CONCURRENT_PROGRAM_ID
   and    p.application_id (+)     = sp.program_application_id
   and    s.set_application_id     = sp.set_application_id
   and    s.request_set_id         = sp.request_set_id 
   and    s.request_set_stage_id   = sp.request_set_stage_id 
   and    a1.application_id        = spa.descriptive_flex_appl_id"
    
DOWNLOAD REQ_SET_LINKS 
  "select 
	a.APPLICATION_SHORT_NAME,
	v.REQUEST_SET_NAME,
	a.APPLICATION_SHORT_NAME,
	v.REQUEST_SET_NAME,
	fnd_load_util.owner_name(v.LAST_UPDATED_BY) OWNER,  
	b2.STAGE_NAME START_STAGE_NAME, 
        to_char(v.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE
   from   fnd_request_sets_vl v, fnd_application a, 
	  fnd_request_set_stages b2,
          fnd_user u
   where ((:REQUEST_SET_NAME is null) or
                 ((:REQUEST_SET_NAME is not null) and
                  (v.REQUEST_SET_NAME like :REQUEST_SET_NAME)))
   and          ((:APPLICATION_SHORT_NAME is null) or
                 ((:APPLICATION_SHORT_NAME is not null) and
                  (a.APPLICATION_SHORT_NAME like :APPLICATION_SHORT_NAME)))
   and    u.USER_ID (+) = v.OWNER
   and    b2.REQUEST_SET_STAGE_ID (+) = v.START_STAGE
   and    b2.set_application_id (+) = v.application_id
   and    b2.request_set_id (+) = v.request_set_id
   and    a.application_id = v.application_id "


DOWNLOAD STAGE_LINKS 
  "select 
          v.STAGE_NAME,
          fnd_load_util.owner_name(v.LAST_UPDATED_BY) OWNER,  
          sls.STAGE_NAME SUCCESS_LINK,
	  wls.STAGE_NAME WARNING_LINK,
	  els.STAGE_NAME ERROR_LINK, 
          to_char(v.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE
   from   fnd_request_sets b,
          fnd_application a,
          fnd_request_set_stages_vl v,
	  fnd_request_set_stages sls,
	  fnd_request_set_stages wls,
	  fnd_request_set_stages els
where     a.APPLICATION_SHORT_NAME = :APPLICATION_SHORT_NAME
   and    b.REQUEST_SET_NAME  = :REQUEST_SET_NAME
   and    ((:STAGE_NAME is null) or
                 ((:STAGE_NAME is not null) and
                  (v.STAGE_NAME like :STAGE_NAME)))
   and    sls.REQUEST_SET_STAGE_ID (+) = v.SUCCESS_LINK
   and    sls.REQUEST_SET_ID (+) = v.REQUEST_SET_ID
   and    sls.SET_APPLICATION_ID (+) = v.SET_APPLICATION_ID
   and    wls.REQUEST_SET_STAGE_ID (+) = v.WARNING_LINK
   and    wls.REQUEST_SET_ID (+) = v.REQUEST_SET_ID
   and    wls.SET_APPLICATION_ID (+) = v.SET_APPLICATION_ID
   and    els.REQUEST_SET_STAGE_ID (+) = v.ERROR_LINK
   and    els.REQUEST_SET_ID (+) = v.REQUEST_SET_ID
   and    els.SET_APPLICATION_ID (+) = v.SET_APPLICATION_ID
   and    a.APPLICATION_ID = b.APPLICATION_ID
   and    b.APPLICATION_ID = v.SET_APPLICATION_ID
   and    b.REQUEST_SET_ID = v.REQUEST_SET_ID "

#
# -- UPLOAD section -- 
# 
#   For each entity, specify the pl/sql block to use to upload the 
#   entity into the database.  Bind names must match DEFINE attribute names.
#   If the relevant tables have table handlers defined, use the LOAD_ROW
#   procedure.
#   
#   Non-leaf entities must include the BEGIN keyword.
#
#   Child entities may use bind names from their parents' definitions.
# 
#   Use command line parameters to control branching between desired behavior.
#   For example, in the upload statement below, we use the parameter
#   UPLOAD_MODE to specify whether we are doing a regular upload or a
#   special upload of translated columns.
#

UPLOAD REQ_SET
  BEGIN
  " begin  -- UPLOAD REQUEST SET
     declare
      app_id   number := 0;
      user_id  number := 0;
      key_id   number := 0;
      chgdb     boolean := FALSE;  -- true if DB should change
      owner_id number := null;
      cp_id    number := null;
      c_flag   varchar2(1) := 'N';
      f_luby    number;  -- entity owner in file
      f_ludate  date;    -- entity update date in file
      db_luby   number;  -- entity owner in db
      db_ludate date;    -- entity update date in db

     begin
      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.owner_id(:owner);

      -- Translate char last_update_date to date
      f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);
    
      select application_id into app_id
      from   fnd_application
      where  application_short_name = :APPLICATION_SHORT_NAME;

      begin

        select REQUEST_SET_ID, last_updated_by, last_update_date
        into key_id, db_luby, db_ludate
        from fnd_request_sets
        where application_id  = app_id 
        and  REQUEST_SET_NAME = :REQUEST_SET_NAME;

        -- Update record, honoring customization mode.
        -- Record should be updated only if:
        -- a. CUSTOM_MODE = FORCE, or
        -- b. file owner is USER, db owner is SEED
        -- c. owners are the same, and file_date > db_date

        if (fnd_load_util.UPLOAD_TEST(
              p_file_id     => f_luby,
              p_file_lud    => f_ludate,
              p_db_id       => db_luby,
              p_db_lud      => db_ludate,
              p_custom_mode => :CUSTOM_MODE))
        then
          chgdb := TRUE;
        end if;

      exception
         when no_data_found then
             chgdb := TRUE;  -- change is needed if no matching db rows
      end;

      if (key_id <> 0 AND :UPLOAD_MODE = 'NLS') then
        begin

          select last_updated_by, last_update_date
          into db_luby, db_ludate
          from fnd_request_sets_tl
          where application_id  = app_id 
          and userenv('LANG') = language
          and  REQUEST_SET_ID = key_id;

	  -- removed source_lang from where clause - bug448351

          -- Update record, honoring customization mode.
          -- Record should be updated only if:
          -- a. CUSTOM_MODE = FORCE, or
          -- b. file owner is USER, db owner is SEED
          -- c. owners are the same, and file_date > db_date

          if (fnd_load_util.UPLOAD_TEST(
              p_file_id     => f_luby,
              p_file_lud    => f_ludate,
              p_db_id       => db_luby,
              p_db_lud      => db_ludate,
              p_custom_mode => :CUSTOM_MODE))
          then
              update fnd_request_sets_tl set
              source_lang=userenv('LANG'),
              USER_REQUEST_SET_NAME =
		      nvl(:USER_REQUEST_SET_NAME, USER_REQUEST_SET_NAME),
              DESCRIPTION = nvl(:DESCRIPTION, DESCRIPTION),
              last_updated_by   = f_luby,
              last_update_date  = f_ludate,
              last_update_login = 0
              where application_id = app_id
              and userenv('LANG') in (language, source_lang)
              and   REQUEST_SET_ID = key_id;
          end if;

          return;
        exception
         when no_data_found then
          return;
        end;
      elsif (:UPLOAD_MODE = 'NLS') then
        return;
      end if;

      if (NOT chgdb) then
        return;
      end if;

      begin
        -- bug: 3104590, check if we have a concurrent prog id to associate

        if ( upper(:ALLOW_CONSTRAINTS_FLAG) = 'Y' ) then
          begin
            select concurrent_program_id into cp_id 
            from fnd_concurrent_programs
            where application_id = app_id
            and concurrent_program_name  = :REQUEST_SET_NAME;
            c_flag := 'N';
          exception
           when others then
            cp_id := null;
	    c_flag := 'Y';
          end;
        else 
          c_flag := 'N';
        end if;

        begin
          select user_id
          into owner_id
          from fnd_user
          where user_name = :OWNER_USER_NAME;
        exception
         when no_data_found then 
          owner_id := null;
          :OWNER_USER_NAME := null;
        end;

        update fnd_request_sets
        set ALLOW_CONSTRAINTS_FLAG = 
			nvl(:ALLOW_CONSTRAINTS_FLAG, ALLOW_CONSTRAINTS_FLAG),
        PRINT_TOGETHER_FLAG    = 
			nvl(:PRINT_TOGETHER_FLAG, PRINT_TOGETHER_FLAG),
        START_DATE_ACTIVE      = 
                        TO_DATE(:START_DATE_ACTIVE,'YYYY/MM/DD'),
        END_DATE_ACTIVE        = 
                       TO_DATE(:END_DATE_ACTIVE, 'YYYY/MM/DD'),
        CONCURRENT_PROGRAM_ID = cp_id, 
        OWNER = owner_id,
        last_updated_by  = f_luby,
        last_update_date = f_ludate,
        last_update_login = 0,
        ICON_NAME =
                        nvl(:START_STAGE_NAME, ICON_NAME)
        where application_id = app_id
        and REQUEST_SET_ID = key_id;

        if (SQL%NOTFOUND) then
          raise no_data_found;
        end if;

        update fnd_request_sets_tl
        set USER_REQUEST_SET_NAME = 
                       nvl(:USER_REQUEST_SET_NAME, USER_REQUEST_SET_NAME),
        DESCRIPTION = nvl(:DESCRIPTION, DESCRIPTION),
        last_updated_by   = f_luby,
        last_update_date  = f_ludate,
        last_update_login = 0
        where application_id = app_id
        and language  = userenv('LANG')
        and REQUEST_SET_ID = key_id;

      exception
       when no_data_found then

        if (:OWNER = 'SEED') then fnd_set.set_session_mode('seed_data');
        else fnd_set.set_session_mode('customer_data');
        end if;

        fnd_set.create_set( :USER_REQUEST_SET_NAME, :REQUEST_SET_NAME,
		:APPLICATION_SHORT_NAME, :DESCRIPTION,
 		:OWNER_USER_NAME, 
		NVL(TO_DATE(:START_DATE_ACTIVE, 'YYYY/MM/DD'),SYSDATE),
                TO_DATE(:END_DATE_ACTIVE, 'YYYY/MM/DD'),
		NVL(:PRINT_TOGETHER_FLAG,'N'),
		c_flag,
		userenv('LANG'));

        if ( :START_STAGE_NAME is not null ) then
		update fnd_request_sets
		set    icon_name = :START_STAGE_NAME
		where  application_id   = app_id
		and    request_set_name = :REQUEST_SET_NAME;
        end if;

        if ( upper(:ALLOW_CONSTRAINTS_FLAG) = 'Y' and cp_id is not null) then
		update fnd_request_sets
		set concurrent_program_id = cp_id,
		allow_constraints_flag = 'Y'
		where application_id = app_id
		and request_set_name = :REQUEST_SET_NAME;
        end if;
      end;

     end;  
  end; "


UPLOAD STAGE
  BEGIN 
  " begin  -- UPLOAD STAGE
     declare
      app_id   number := 0;
      user_id  number := 0;
      key_id   number := 0;
      pkey_id   number := 0;
      s_count  number := null;
      chgdb     boolean := FALSE;  -- true if DB should change
      f_app_id number := null;
      f_exe_id number := null;
      st_stage varchar2(1) := 'N';
      cp_id    number := null;
      c_flag   varchar2(1) := 'N';
      ststgnm  varchar2(30) := null;
      f_luby    number;  -- entity owner in file
      f_ludate  date;    -- entity update date in file
      db_luby   number;  -- entity owner in db
      db_ludate date;    -- entity update date in db

     begin
      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.owner_id(:owner);

      -- Translate char last_update_date to date
      f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

      select application_id into app_id
      from   fnd_application
      where  application_short_name = :APPLICATION_SHORT_NAME;

      begin

        select REQUEST_SET_ID, ICON_NAME into pkey_id, ststgnm
        from fnd_request_sets
        where application_id = app_id
        and   REQUEST_SET_NAME = :REQUEST_SET_NAME;
       
        if ( ststgnm = :STAGE_NAME ) then
            st_stage := 'Y';
        else
            st_stage := 'N';
        end if;

        select REQUEST_SET_STAGE_ID,  last_updated_by, last_update_date
          into key_id, db_luby, db_ludate
          from fnd_request_set_stages
         where set_application_id = app_id
           and   REQUEST_SET_ID =  pkey_id
           and   STAGE_NAME = :STAGE_NAME;

         -- Update record, honoring customization mode.
         -- Record should be updated only if:
         -- a. CUSTOM_MODE = FORCE, or
         -- b. file owner is USER, db owner is SEED
         -- c. owners are the same, and file_date > db_date

         if (fnd_load_util.UPLOAD_TEST(
               p_file_id     => f_luby,
               p_file_lud    => f_ludate,
               p_db_id       => db_luby,
               p_db_lud      => db_ludate,
               p_custom_mode => :CUSTOM_MODE))
         then
           chgdb := TRUE;
         end if;

      exception
         when no_data_found then
             chgdb := TRUE;  -- change is needed if no matching db rows
      end;

      if (key_id <> 0 AND :UPLOAD_MODE = 'NLS') then
        begin

          select last_updated_by, last_update_date
          into db_luby, db_ludate
          from fnd_request_set_stages_tl
          where set_application_id  = app_id 
          and userenv('LANG') = language
          and   REQUEST_SET_ID = pkey_id
          and   REQUEST_SET_STAGE_ID = key_id;

	  -- removed source_lang from where clause - bug448351

          -- Update record, honoring customization mode.
          -- Record should be updated only if:
          -- a. CUSTOM_MODE = FORCE, or
          -- b. file owner is USER, db owner is SEED
          -- c. owners are the same, and file_date > db_date

          if (fnd_load_util.UPLOAD_TEST(
              p_file_id     => f_luby,
              p_file_lud    => f_ludate,
              p_db_id       => db_luby,
              p_db_lud      => db_ludate,
              p_custom_mode => :CUSTOM_MODE))
          then
              update fnd_request_set_stages_tl set
              source_lang=userenv('LANG'),
              USER_STAGE_NAME = nvl(:USER_STAGE_NAME, USER_STAGE_NAME),
              DESCRIPTION = nvl(:DESCRIPTION, DESCRIPTION),
              last_updated_by   = f_luby,
              last_update_date  = f_ludate,
              last_update_login = 0
              where set_application_id = app_id
              and userenv('LANG') in (language, source_lang)
              and   REQUEST_SET_ID = pkey_id
              and   REQUEST_SET_STAGE_ID = key_id;
          end if;

          return;
        exception
         when no_data_found then
          return;
        end;
      elsif (:UPLOAD_MODE = 'NLS') then
        return;
      end if;

      if (NOT chgdb) then
        return;
      end if;

      begin
        if ( :FUNCTION is not null and 
             :FUNCTION_APPLICATION is not null) then
          select application_id into f_app_id
          from fnd_application
          where application_short_name = :FUNCTION_APPLICATION;

          select executable_id into f_exe_id
          from fnd_executables
          where application_id = f_app_id
          and executable_name = :FUNCTION;
        else
          f_app_id := null;
          f_exe_id := null;
        end if;

        if (st_stage = 'Y') then 
          update fnd_request_sets
          set start_stage = nvl(key_id, START_STAGE)
          where request_set_id = pkey_id;
        end if;

        update fnd_request_set_stages
        set critical = nvl(:CRITICAL, CRITICAL),
        allow_constraints_flag = 
			nvl(:ALLOW_CONSTRAINTS_FLAG, ALLOW_CONSTRAINTS_FLAG),
        DISPLAY_SEQUENCE = 
			nvl(:DISPLAY_SEQUENCE, DISPLAY_SEQUENCE),
        function_application_id = f_app_id,
        function_id = f_exe_id,
        last_updated_by   = f_luby,
        last_update_date  = f_ludate,
        last_update_login = 0
        where set_application_id = app_id
        and REQUEST_SET_ID = pkey_id
        and REQUEST_SET_STAGE_ID = key_id;   

        if (SQL%NOTFOUND) then
          raise no_data_found;
        end if;

        update fnd_request_set_stages_tl 
        set user_stage_name = nvl(:USER_STAGE_NAME, USER_STAGE_NAME),
        description = nvl(:DESCRIPTION, DESCRIPTION),
        last_updated_by   = f_luby,
        last_update_date  = f_ludate,
        last_update_login = 0
        where set_application_id = app_id
        and language  = userenv('LANG')
        and REQUEST_SET_ID = pkey_id
        and REQUEST_SET_STAGE_ID = key_id;

      exception
       when no_data_found then
        if (:OWNER = 'SEED') then fnd_set.set_session_mode('seed_data');
        else fnd_set.set_session_mode('customer_data');
        end if;

        -- bug: 3104590, check if we have a concurrent prog id to associate

        if ( upper(:ALLOW_CONSTRAINTS_FLAG) = 'Y' ) then
          begin
            select concurrent_program_id into cp_id 
            from fnd_concurrent_programs
            where application_id = app_id
            and concurrent_program_name  = :REQUEST_SET_NAME;
            c_flag := 'N';
          exception
           when others then
            cp_id := null;
	    c_flag := 'Y';
          end;
        else 
          c_flag := 'N';
        end if;

	fnd_set.add_stage( :USER_STAGE_NAME, :REQUEST_SET_NAME, 
				:APPLICATION_SHORT_NAME, :STAGE_NAME,
				:DESCRIPTION, :DISPLAY_SEQUENCE, :FUNCTION,
				:FUNCTION_APPLICATION, :CRITICAL,
				c_flag, st_stage,
				userenv('LANG'));

        if ( upper(:ALLOW_CONSTRAINTS_FLAG) = 'Y' and cp_id is not null) then
	  update fnd_request_set_stages
          set concurrent_program_id = cp_id,
          allow_constraints_flag = 'Y'
          where set_application_id = app_id
          and request_set_id = pkey_id
          and stage_name = :STAGE_NAME;
        end if;
      end;
     end;
  end; "

UPLOAD STAGE_PROG
  BEGIN
  " begin   -- UPLOAD STAGE PROGRAM
     declare
      app_id   number := 0;
      user_id  number := 0;
      key_id   number := 0;
      pkey_id  number := 0;  -- request set id
      skey_id  number := 0;  -- request set stage id
      ssp_app_id number := 0; -- stage sequence program app_id
      ssp_id    number := 0;  -- stage sequence program id
      sp_id    number := 0;  -- request set program id
      f_luby    number;  -- entity owner in file
      f_ludate  date;    -- entity update date in file
      db_luby   number;  -- entity owner in db
      db_ludate date;    -- entity update date in db

     begin

       if ( :UPLOAD_MODE = 'NLS' ) then
           return;
       end if;

       select application_id into app_id
         from fnd_application
        where application_short_name = :APPLICATION_SHORT_NAME;

      select REQUEST_SET_ID into pkey_id
        from fnd_request_sets
       where application_id = app_id
         and REQUEST_SET_NAME = :REQUEST_SET_NAME;
       
      select request_set_stage_id into skey_id
        from fnd_request_set_stages
       where set_application_id = app_id
         and request_set_id = pkey_id
         and stage_name = :STAGE_NAME;

      select application_id into ssp_app_id
        from fnd_application
       where application_short_name = :PROGRAM_APPLICATION;

      select concurrent_program_id
        into ssp_id
        from fnd_concurrent_programs
       where application_id = ssp_app_id
         and concurrent_program_name = :PROGRAM_NAME;

      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.owner_id(:owner);

      -- Translate char last_update_date to date
      f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

   begin

      select last_updated_by, last_update_date, request_set_program_id
      into db_luby, db_ludate, sp_id
      from fnd_request_set_programs 
      where set_application_id  = app_id 
      and request_set_id = pkey_id 
      and request_set_stage_id = skey_id
      and sequence = :SEQUENCE;

     if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                db_ludate, :CUSTOM_MODE)) then

      update fnd_request_set_programs
         set PROGRAM_APPLICATION_ID = ssp_app_id,
             CONCURRENT_PROGRAM_ID = ssp_id,
             CRITICAL = :CRITICAL,
	     NUMBER_OF_COPIES = to_number(:NUMBER_OF_COPIES),
	     PRINTER = :PRINTER,
	     PRINT_STYLE = :PRINT_STYLE,
	     SAVE_OUTPUT_FLAG  = :SAVE_OUTPUT_FLAG,
	     last_updated_by   = f_luby,
             last_update_date  = f_ludate,
             last_update_login = 0
       where set_application_id = app_id
	 and request_set_id = pkey_id
	 and request_set_stage_id = skey_id
	 and SEQUENCE = :SEQUENCE;

      
      delete from fnd_request_set_program_args
      where application_id = app_id
         and request_set_id = pkey_id
         and request_set_program_id = sp_id
         and descriptive_flexfield_name <> '$SRS$.' || :PROGRAM_NAME;
    
      end if;
    exception
      when no_data_found then
           if (:OWNER = 'SEED') then fnd_set.set_session_mode('seed_data');
           else fnd_set.set_session_mode('customer_data');
           end if;

           fnd_set.add_program( :PROGRAM_NAME, :PROGRAM_APPLICATION,
				:REQUEST_SET_NAME, :APPLICATION_SHORT_NAME,
				:STAGE_NAME, :SEQUENCE, :CRITICAL,
				:NUMBER_OF_COPIES, :SAVE_OUTPUT_FLAG,
				:PRINT_STYLE, :PRINTER );
     end;
     end;
    end; "

UPLOAD PROG_ARGS
  " begin  -- UPLOAD PROGRAM ARGUMENTS
     declare
      app_id   number := 0;
      user_id  number := 0;
      key_id   number := 0;
      pkey_id  number := 0;
      skey_id  number := 0;
      sp_id    number := 0;
      p_app_id number := 0;
      f_luby    number;  -- entity owner in file
      f_ludate  date;    -- entity update date in file
      db_luby   number;  -- entity owner in db
      db_ludate date;    -- entity update date in db

     begin

       if ( :UPLOAD_MODE = 'NLS' ) then
           return;
       end if;

       select application_id into app_id
         from fnd_application
        where application_short_name = :APPLICATION_SHORT_NAME;

      select REQUEST_SET_ID into pkey_id
        from fnd_request_sets
       where application_id = app_id
         and REQUEST_SET_NAME = :REQUEST_SET_NAME;
       
      select request_set_stage_id into skey_id
        from fnd_request_set_stages
       where set_application_id = app_id 
         and request_set_id = pkey_id
         and stage_name = :STAGE_NAME;

      select request_set_program_id into sp_id
	from fnd_request_set_programs
       where set_application_id = app_id
	 and request_set_id = pkey_id
	 and request_set_stage_id = skey_id
	 and sequence = :SEQUENCE;

      select application_id into p_app_id
        from fnd_application
       where application_short_name = :DESC_FLEX_APPL;

      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.owner_id(:owner);

      -- Translate char last_update_date to date
      f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

      begin

      select last_updated_by, last_update_date
       into db_luby, db_ludate
       from fnd_request_set_program_args
      where application_id = app_id
         and request_set_id = pkey_id
         and request_set_program_id = sp_id
         and descriptive_flexfield_name = :DESC_FLEX_NAME
         and descriptive_flex_appl_id = p_app_id
         and application_column_name = :COL_NAME;

     if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                db_ludate, :CUSTOM_MODE)) then

      update fnd_request_set_program_args
         set DISPLAY_FLAG = nvl(:DISPLAY_FLAG, DISPLAY_FLAG),
	     INSERT_FLAG  = nvl(:INSERT_FLAG, INSERT_FLAG),
	     UPDATE_FLAG  = nvl(:UPDATE_FLAG , UPDATE_FLAG),
	     DEFAULT_TYPE = :DEFAULT_TYPE ,
	     DEFAULT_VALUE = :DEFAULT_VALUE ,
	     SHARED_PARAMETER_NAME = :SHARED_PARAMETER_NAME,
	     last_updated_by   = f_luby,
             last_update_date  = f_ludate,
             last_update_login = 0
       where application_id = app_id
	 and request_set_id = pkey_id
	 and request_set_program_id = sp_id
	 and descriptive_flexfield_name = :DESC_FLEX_NAME
	 and descriptive_flex_appl_id = p_app_id
	 and application_column_name = :COL_NAME;
      end if;

       exception 
         when no_data_found then
           if (:OWNER = 'SEED') then fnd_set.set_session_mode('seed_data');
           else fnd_set.set_session_mode('customer_data');
           end if;

           insert into fnd_request_set_program_args
              (application_id, request_set_id, request_set_program_id,
               descriptive_flex_appl_id, descriptive_flexfield_name,
               application_column_name, last_update_date, last_updated_by,
               creation_date, created_by, last_update_login, display_flag,
               insert_flag, update_flag, default_type, default_value,
               shared_parameter_name)
           values
	      (app_id, pkey_id, sp_id,
		p_app_id, :DESC_FLEX_NAME, 
		:COL_NAME, f_ludate, f_luby,
		sysdate, user_id, 0, :DISPLAY_FLAG,
		:INSERT_FLAG, :UPDATE_FLAG, :DEFAULT_TYPE, :DEFAULT_VALUE,
		:SHARED_PARAMETER_NAME);

     end;
     end;
    end; "

UPLOAD REQ_SET_LINKS
 BEGIN
    " begin   -- UPLOAD SET LINKS
     declare
      app_id   number := 0;
      user_id  number := 0;
      key_id   number := 0;
      pkey_id  number := 0;
      skey_id  number := 0;
      f_luby    number;  -- entity owner in file
      f_ludate  date;    -- entity update date in file
      db_luby   number;  -- entity owner in db
      db_ludate date;    -- entity update date in db

     begin

       if ( :UPLOAD_MODE = 'NLS' ) then
           return;
       end if;

       select application_id into app_id
         from fnd_application
        where application_short_name = nvl(:RSET_APPLICATION_SHORT_NAME,
                                           :APPLICATION_SHORT_NAME);

      select REQUEST_SET_ID into pkey_id
        from fnd_request_sets
       where application_id = app_id
         and REQUEST_SET_NAME = nvl(:RSET_REQUEST_SET_NAME, :REQUEST_SET_NAME);
       
      if ( :START_STAGE_NAME is not null ) then
         select request_set_stage_id into skey_id
           from fnd_request_set_stages
          where set_application_id = app_id
            and request_set_id = pkey_id
            and stage_name = :START_STAGE_NAME;

      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.owner_id(:owner);

      -- Translate char last_update_date to date
      f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

      select last_updated_by, last_update_date
      into db_luby, db_ludate
      from fnd_request_sets
      where application_id = app_id
      and request_set_id = pkey_id;

      if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                db_ludate, :CUSTOM_MODE)) then

         update fnd_request_sets
            set start_stage = skey_id,
	        last_updated_by   = f_luby,
                last_update_date  = f_ludate,
                last_update_login = 0
          where application_id = app_id
	    and request_set_id = pkey_id;
       end if;
       end if;
     end;
   end; "

UPLOAD STAGE_LINKS
    " begin   -- UPLOAD STAGE LINKS
     declare
      s_link VARCHAR2(1) := 'N';
      w_link VARCHAR2(1) := 'N';
      e_link VARCHAR2(1) := 'N';

     begin

       if ( :UPLOAD_MODE = 'NLS' ) then
           return;
       end if;

       if (:OWNER = 'SEED') then fnd_set.set_session_mode('seed_data');
       else fnd_set.set_session_mode('customer_data');
       end if;

       if ( :SUCCESS_LINK is not null ) then
           fnd_set.link_stages( 
                  nvl(:RSET_REQUEST_SET_NAME, :REQUEST_SET_NAME), 
                  nvl(:RSET_APPLICATION_SHORT_NAME, :APPLICATION_SHORT_NAME),
                  :STAGE_NAME, :SUCCESS_LINK, 'Y','N','N');
       end if;
       
       if ( :WARNING_LINK is not null ) then
           fnd_set.link_stages( 
                  nvl(:RSET_REQUEST_SET_NAME, :REQUEST_SET_NAME), 
                  nvl(:RSET_APPLICATION_SHORT_NAME, :APPLICATION_SHORT_NAME),
                  :STAGE_NAME, :WARNING_LINK, 'N','Y','N');
       end if;
  
       if ( :ERROR_LINK is not null ) then
           fnd_set.link_stages( 
                  nvl(:RSET_REQUEST_SET_NAME, :REQUEST_SET_NAME), 
                  nvl(:RSET_APPLICATION_SHORT_NAME, :APPLICATION_SHORT_NAME),
                  :STAGE_NAME, :ERROR_LINK, 'N','N','Y');
       end if;

     end;
   end; "

  
