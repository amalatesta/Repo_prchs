#
# $Header: afcpsch.lct 120.1.12000000.1 2007/01/18 12:40:57 appldev ship $
#
# <filename>.lct - <Entity description> Loader Configuration
#
# Entities -
#
#    SCHEDULE
#
#
# -- DEFINE SECTION --
#
#   Use this section to specify the structure of the entities.
#
#   ID column values are not portable.  Use an equivalent text value instead.
#   For example, use APPLICATION_SHORT_NAME instead of APPLICATION_ID.
# 
#   DATE and NUMBER datatypes should be defined and stored as VARCHAR2(11)
#   and VARCHAR2(50), respectively.
#
#   The OWNER field is used to store and determine the values of the 
#   "WHO" columns.
#
COMMENT = "dbdrv: exec fnd bin FNDLOAD bin &phase=daa+56 checkfile:~PROD:~PATH:~FILE &ui_apps 0 Y UPLOAD @FND:patch/115/import/afcpsch.lct @~PROD:~PATH/~FILE" 
 DEFINE SCHEDULE
  KEY   RELEASE_CLASS_NAME VARCHAR2(20)
  KEY   APPLICATION_SHORT_NAME VARCHAR2(50)
  CTX   OWNER           VARCHAR2(4000)
  BASE  ENABLED_FLAG    VARCHAR2(1)
  BASE  DATE1           VARCHAR2(11)
  BASE  DATE2           VARCHAR2(11)
  BASE  START_DATE_ACTIVE VARCHAR2(11)
  BASE  END_DATE_ACTIVE VARCHAR2(11)
  BASE  CLASS_TYPE      VARCHAR2(1)
  BASE  CLASS_INFO      VARCHAR2(64)
  BASE  RESUBMIT_INTERVAL VARCHAR2(50)
  BASE  RESUBMIT_INTERVAL_UNIT_CODE VARCHAR2(30)
  BASE  RESUBMIT_INTERVAL_TYPE_CODE VARCHAR2(30)
  TRANS USER_RELEASE_CLASS_NAME  VARCHAR2(20)
  TRANS DESCRIPTION     VARCHAR2(80)
  BASE  LAST_UPDATE_DATE  VARCHAR2(10)
END SCHEDULE 

#
# -- DOWNLOAD SECTION --
#
#   For each entity, specify the SQL statement to use to flesh out
#   its entity definition.  SELECT columns must be in same order and
#   datatype as the entity's attributes as defined above.
#
#   Convert dates to varchar2 using:
#    	to_char(sysdate, 'DD/MM/YYYY')
#
#   Wrap parameter values with nvl() to support null parameter passing
#

DOWNLOAD SCHEDULE
  "select   RELEASE_CLASS_NAME,
  	A.APPLICATION_SHORT_NAME,
	fnd_load_util.owner_name(v.LAST_UPDATED_BY) OWNER,
  	v.ENABLED_FLAG,
  	v.DATE1,
   	v.DATE2,
 	v.START_DATE_ACTIVE,
        v.END_DATE_ACTIVE,
        v.CLASS_TYPE,
        v.CLASS_INFO,
        v.RESUBMIT_INTERVAL,
        v.RESUBMIT_INTERVAL_UNIT_CODE,
        v.RESUBMIT_INTERVAL_TYPE_CODE,
        v.USER_RELEASE_CLASS_NAME,
        v.DESCRIPTION, 
        to_char(v.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE
   from   FND_CONC_RELEASE_CLASSES_VL v,
          FND_APPLICATION a
           where ((:RELEASE_CLASS_NAME is null) or
                 ((:RELEASE_CLASS_NAME is not null) and
                  (v.RELEASE_CLASS_NAME like :RELEASE_CLASS_NAME)))
   and          ((:APPLICATION_SHORT_NAME is null) or
                 ((:APPLICATION_SHORT_NAME is not null) and
                  (a.APPLICATION_SHORT_NAME like :APPLICATION_SHORT_NAME)))
   and    v.APPLICATION_ID = a.APPLICATION_ID 
   and    v.OWNER_REQ_ID is NULL "


#
# -- UPLOAD section -- 
# 
#   For each entity, specify the pl/sql block to use to upload the 
#   entity into the database.  Bind names must match DEFINE attribute names.
#   If the relevant tables have table handlers defined, use the LOAD_ROW
#   procedure.
#   
#   Non-leaf entities must include the BEGIN keyword.
#
#   Child entities may use bind names from their parents' definitions.
# 
#   Use command line parameters to control branching between desired behavior.
#   For example, in the upload statement below, we use the parameter
#   UPLOAD_MODE to specify whether we are doing a regular upload or a
#   special upload of translated columns.
#

UPLOAD SCHEDULE 
  " begin   
     declare
      app_id   number := 0;
      user_id  number := 0;
      key_id   number := 0;
      f_luby number;  -- entity owner in file
      f_ludate date;  -- entity update date in file
      db_luby number; -- entity owner in db
      db_ludate date; -- entity update date in db

     begin

        -- Translate owner to file_last_updated_by
        f_luby := fnd_load_util.owner_id(:OWNER);

        -- Translate char last_update_date to date
        f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

      select application_id into app_id
      from   fnd_application
      where  application_short_name = :APPLICATION_SHORT_NAME;

     select RELEASE_CLASS_ID into key_id
      from fnd_conc_release_classes 
      where application_id = app_id
        and   RELEASE_CLASS_NAME = :RELEASE_CLASS_NAME;


      if (:UPLOAD_MODE = 'NLS') then

        begin
          select LAST_UPDATED_BY, LAST_UPDATE_DATE
           into db_luby, db_ludate
          from fnd_conc_release_classes_tl
          where application_id = app_id
          and userenv('LANG') =   language
          and   RELEASE_CLASS_ID = key_id;

        if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                       db_ludate, :CUSTOM_MODE)) then

 
           update fnd_conc_release_classes_tl set
           source_lang=userenv('LANG'),
            USER_RELEASE_CLASS_NAME =
	     	nvl(:USER_RELEASE_CLASS_NAME, USER_RELEASE_CLASS_NAME),
            DESCRIPTION = nvl(:DESCRIPTION, DESCRIPTION),
             last_updated_by   = f_luby,
             last_update_date  = f_ludate,
             last_update_login = 0
            where application_id = app_id
            and userenv('LANG') in (language, source_lang)
            and   RELEASE_CLASS_ID = key_id;
       end if;
       end;
      else
        null;
      end if;
     end;
    end; "

