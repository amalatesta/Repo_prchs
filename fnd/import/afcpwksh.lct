#
# $Header: afcpwksh.lct 120.0.12000000.1 2007/01/18 12:41:00 appldev ship $
#
# <filename>.lct - <Entity description> Loader Configuration
#
# Entities -
#
#   WORKSHIFT
#
#
# -- DEFINE SECTION --
#
#   Use this section to specify the structure of the entities.
#
#   ID column values are not portable.  Use an equivalent text value instead.
#   For example, use APPLICATION_SHORT_NAME instead of APPLICATION_ID.
# 
#   DATE and NUMBER datatypes should be defined and stored as VARCHAR2(11)
#   and VARCHAR2(50), respectively.
#
#   The OWNER field is used to store and determine the values of the 
#   "WHO" columns.
#
COMMENT = "dbdrv: exec fnd bin FNDLOAD bin &phase=daa+56 checkfile:~PROD:~PATH:~FILE &ui_apps 0 Y UPLOAD @FND:patch/115/import/afcpwksh.lct @~PROD:~PATH/~FILE"
DEFINE WORKSHIFT 
  KEY   CONCURRENT_TIME_PERIOD_ID VARCHAR2(50)
  BASE  CONCURRENT_TIME_PERIOD_NAME VARCHAR2(30)
  KEY   APPLICATION_SHORT_NAME  VARCHAR2(50)
  CTX   OWNER          		VARCHAR2(4000)
  BASE  LAST_UPDATE_DATE        VARCHAR2(75)
  TRANS DESCRIPTION      	VARCHAR2(240)
  BASE  START_TIME              VARCHAR2(50)
  BASE  END_TIME                VARCHAR2(50)
  BASE  FROM_WEEK_DAY           VARCHAR2(50)
  BASE  TO_WEEK_DAY             VARCHAR2(50)
  BASE  SPECIFIC_DATE           VARCHAR2(11)
  BASE  CONCURRENT_DAYS_SPEC_METHOD VARCHAR2(1)
END WORKSHIFT 

#
# -- DOWNLOAD SECTION --
#
#   For each entity, specify the SQL statement to use to flesh out
#   its entity definition.  SELECT columns must be in same order and
#   datatype as the entity's attributes as defined above.
#
#   Convert dates to varchar2 using:
#    	to_char(sysdate, 'DD/MM/YYYY')
#
#   Wrap parameter values with nvl() to support null parameter passing
#

DOWNLOAD WORKSHIFT
"select v.CONCURRENT_TIME_PERIOD_id,
	v.CONCURRENT_TIME_PERIOD_NAME,
  	  a.APPLICATION_SHORT_NAME,
          fnd_load_util.OWNER_NAME(v.LAST_UPDATED_BY) OWNER,
          to_char(v.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
          v.DESCRIPTION,
          v.START_TIME,
          v.END_TIME,
          v.FROM_WEEK_DAY,
          v.TO_WEEK_DAY,
          v.SPECIFIC_DATE,
          v.CONCURRENT_DAYS_SPEC_METHOD
  from   fnd_concurrent_time_periods v, 
	  fnd_application a
   where ((:CONCURRENT_TIME_PERIOD_id is null) or
                 ((:CONCURRENT_TIME_PERIOD_id is not null) and
                  (v.CONCURRENT_TIME_PERIOD_id like
			:CONCURRENT_TIME_PERIOD_id)))
   and          ((:APPLICATION_SHORT_NAME is null) or
                 ((:APPLICATION_SHORT_NAME is not null) and
                  (a.APPLICATION_SHORT_NAME like :APPLICATION_SHORT_NAME)))
   and 	  a.APPLICATION_ID = v.APPLICATION_ID "


#
# -- UPLOAD section -- 
# 
#   For each entity, specify the pl/sql block to use to upload the 
#   entity into the database.  Bind names must match DEFINE attribute names.
#   If the relevant tables have table handlers defined, use the LOAD_ROW
#   procedure.
#   
#   Non-leaf entities must include the BEGIN keyword.
#
#   Child entities may use bind names from their parents' definitions.
# 
#   Use command line parameters to control branching between desired behavior.
#   For example, in the upload statement below, we use the parameter
#   UPLOAD_MODE to specify whether we are doing a regular upload or a
#   special upload of translated columns.
#

UPLOAD WORKSHIFT
  " begin  
     declare
      app_id   number := 0;
      chgdb     boolean := FALSE;  -- true if DB should change
      f_luby    number;  -- entity owner in file
      f_ludate  date;    -- entity update date in file
      db_luby   number;  -- entity owner in db
      db_ludate date;    -- entity update date in db

     begin
      -- Translate owner to file_last_updated_by
      f_luby := fnd_load_util.OWNER_ID(:OWNER);

      -- Translate char last_update_date to date
      f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

      select application_id into app_id
      from   fnd_application
      where  application_short_name = :APPLICATION_SHORT_NAME;

      begin
          select LAST_UPDATED_BY, LAST_UPDATE_DATE
            into db_luby, db_ludate
            from  fnd_concurrent_time_periods
           where application_id = app_id
             and CONCURRENT_TIME_PERIOD_ID = :CONCURRENT_TIME_PERIOD_ID;

          -- Update record, honoring customization mode.
          -- Record should be updated only if:
          -- a. CUSTOM_MODE = FORCE, or
          -- b. file owner is USER, db owner is SEED
          -- c. owners are the same, and file_date > db_date

          if (fnd_load_util.UPLOAD_TEST(
                p_file_id     => f_luby,
                p_file_lud    => f_ludate,
                p_db_id       => db_luby,
                p_db_lud      => db_ludate,
                p_custom_mode => :CUSTOM_MODE))
          then
            chgdb := TRUE;
          end if;

      exception
         when no_data_found then
             chgdb := TRUE;  -- change is needed if no matching db rows
      end;

      if (NOT chgdb) then
        return;
      end if;

      if (:UPLOAD_MODE = 'NLS') then
        update fnd_concurrent_time_periods set
        CONCURRENT_TIME_PERIOD_NAME
	    = nvl(:CONCURRENT_TIME_PERIOD_NAME, CONCURRENT_TIME_PERIOD_NAME),
        DESCRIPTION = nvl(:DESCRIPTION, DESCRIPTION),
          last_updated_by   = f_luby,
          last_update_date  = f_ludate,
          last_update_login = 0
        where application_id = app_id
        and   CONCURRENT_TIME_PERIOD_ID = :CONCURRENT_TIME_PERIOD_ID
        and userenv('LANG') =
         (Select language_code from FND_LANGUAGES where installed_flag = 'B');
      else
        update fnd_concurrent_time_periods set
        CONCURRENT_TIME_PERIOD_NAME
            = nvl(:CONCURRENT_TIME_PERIOD_NAME, CONCURRENT_TIME_PERIOD_NAME),
        LAST_UPDATED_BY   = f_luby,
        LAST_UPDATE_DATE  = f_ludate,
        LAST_UPDATE_LOGIN = 0,
        DESCRIPTION = nvl(:DESCRIPTION, DESCRIPTION),
        START_TIME = nvl(:START_TIME, START_TIME),
        END_TIME = nvl(:END_TIME, END_TIME), 
        FROM_WEEK_DAY = nvl(:FROM_WEEK_DAY, FROM_WEEK_DAY),
        TO_WEEK_DAY = nvl(:TO_WEEK_DAY, TO_WEEK_DAY),
        SPECIFIC_DATE = nvl(:SPECIFIC_DATE, SPECIFIC_DATE), 
        CONCURRENT_DAYS_SPEC_METHOD 
            = nvl(:CONCURRENT_DAYS_SPEC_METHOD, CONCURRENT_DAYS_SPEC_METHOD)
        where application_id = app_id
        and   CONCURRENT_TIME_PERIOD_ID = :CONCURRENT_TIME_PERIOD_ID;

        if (SQL%NOTFOUND) then
           insert into fnd_concurrent_time_periods (
             APPLICATION_ID, 
             CONCURRENT_TIME_PERIOD_ID,
             CONCURRENT_TIME_PERIOD_NAME,
             LAST_UPDATED_BY, LAST_UPDATE_DATE,
             CREATED_BY, CREATION_DATE,
             LAST_UPDATE_LOGIN,
             DESCRIPTION, 
             START_TIME, END_TIME,
             FROM_WEEK_DAY, TO_WEEK_DAY,
             SPECIFIC_DATE,
             CONCURRENT_DAYS_SPEC_METHOD ) 
           values (
             app_id,
             :CONCURRENT_TIME_PERIOD_ID,
             :CONCURRENT_TIME_PERIOD_NAME, 
             f_luby, f_ludate,
             f_luby, f_ludate,
             0,
             :DESCRIPTION, 
             :START_TIME, :END_TIME,
             :FROM_WEEK_DAY, :TO_WEEK_DAY,
             :SPECIFIC_DATE,
             :CONCURRENT_DAYS_SPEC_METHOD );
        end if; -- update or insert
      end if; --  NLS or non-NLS mode 
     end;
    end; "

