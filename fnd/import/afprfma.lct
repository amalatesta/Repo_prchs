#
# $Header: afprfma.lct 120.0 2005/05/07 16:16:13 appldev noship $
#
# afprfma.lct - <Entity description> Loader Configuration
#
# Entities -
#
#    ENTITY
#       CHILD_ENTITY
#
# Note: to change the language you are downloading, setenv NLS_LANG before
#       running the loader.
#
#
# -- DEFINE SECTION --
#
#   Use this section to specify the structure of the entities.
#
#   ID column values are not portable.  Use an equivalent text value instead.
#   For example, use APPLICATION_SHORT_NAME instead of APPLICATION_ID.
# 
#   DATE and NUMBER datatypes should be defined and stored as VARCHAR2(11)
#   and VARCHAR2(50), respectively.
#
#   The OWNER field is used to store and determine the values of the 
#   "WHO" columns.
#
COMMENT = "dbdrv: exec fnd bin FNDLOAD bin &phase=daa+52 checkfile:~PROD:~PATH:~FILE &ui_apps 0 Y UPLOAD @FND:patch/115/import/afprfma.lct @~PROD:~PATH/~FILE"


DEFINE FND_PERFORMANCE_TESTS
  KEY   TEST_ID 	NUMBER
  BASE  TEST_DATE       VARCHAR2(11)
  BASE  BATCH           VARCHAR2(2)
  BASE  DATA_SIZE       NUMBER
  BASE  LATENCY_TRIALS  NUMBER
  BASE  BANDWIDTH_TRIALS NUMBER
  BASE  LATENCY_ITERATIONS NUMBER
  BASE  BANDWIDTH_ITERATIONS NUMBER
  BASE  NOTES            VARCHAR2(2000)
  CTX   LAST_UPDATE_DATE VARCHAR2(10) 
  CTX   OWNER            VARCHAR2(4000)
  
   DEFINE FND_PERFORMANCE_RESULTS
      KEY   TYPE          VARCHAR2(1)
      KEY   TRIAL_ID	NUMBER
      BASE  ELAPSED_TIME NUMBER
      BASE  START_TIME   NUMBER
      BASE  END_TIME     NUMBER
      BASE  CORRECTION_TIME NUMBER
      CTX   LAST_UPDATE_DATE VARCHAR2(10)
      CTX   OWNER        VARCHAR2(4000)
   END FND_PERFORMANCE_RESULTS
END FND_PERFORMANCE_TESTS
#
# -- DOWNLOAD SECTION --
#
#   For each entity, specify the SQL statement to use to flesh out
#   its entity definition.  SELECT columns must be in same order and
#   datatype as the entity's attributes as defined above.
#
#   Convert dates to varchar2 using:
#    	to_char(sysdate, 'DD/MM/YYYY')
#
#   Protect against null parameter passing using 
#       and (:parm is null or (:parm is not null and col like :parm))
#

DOWNLOAD FND_PERFORMANCE_TESTS
  "select test_id, to_char(test_date,'YYYY/MM/DD'), batch, data_size, latency_trials,bandwidth_trials,
          latency_iterations,bandwidth_iterations,notes,
          to_char(LAST_UPDATE_DATE, 'YYYY/MM/DD'), 
          fnd_load_util.owner_name(LAST_UPDATED_BY) OWNER
   from   FND_PERFORMANCE_TESTS 
   where  test_id in (1,2,3,4)"

DOWNLOAD FND_PERFORMANCE_RESULTS
  "select type, trial_id,elapsed_time, start_time,end_time,
          correction_time,
          to_char(LAST_UPDATE_DATE, 'YYYY/MM/DD'),
          fnd_load_util.owner_name(LAST_UPDATED_BY) OWNER
   from   FND_PERFORMANCE_RESULTS  
   where  test_id = :TEST_ID "

#
# -- UPLOAD section -- 
# 
#   For each entity, specify the pl/sql block to use to upload the 
#   entity into the database.  Bind names must match DEFINE attribute names.
#   If the relevant tables have table handlers defined, use the LOAD_ROW
#   procedure.
#   
#   Non-leaf entities must include the BEGIN keyword.
#
#   Child entities may use bind names from their parents' definitions.
# 
#   Use command line parameters to control branching between desired behavior.
#   For example, in the upload statement below, we use the parameter
#   UPLOAD_MODE to specify whether we are doing a regular upload or a
#   special upload of translated columns.
#

UPLOAD FND_PERFORMANCE_TESTS
BEGIN  
"  begin 
     declare
       f_luby    number;
       f_ludate  date;
       db_luby   number;
       db_ludate date;
     begin
       -- Translate owner to file_last_updated_by
       f_luby := fnd_load_util.owner_id(:OWNER);
 
       -- Translate char last_update_date to date
       f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

       select last_updated_by, last_update_date
       into db_luby, db_ludate
       from fnd_performance_tests
       where test_id = :TEST_ID;
 
       if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                     db_ludate, :CUSTOM_MODE)) THEN 
          update FND_PERFORMANCE_TESTS set
            test_id = :TEST_ID,
            test_date = to_date(:TEST_DATE,'YYYY/MM/DD'),       
            batch = :BATCH,          
            data_size = :DATA_SIZE,       
            latency_trials = :LATENCY_TRIALS,  
            bandwidth_trials = :BANDWIDTH_TRIALS, 
            latency_iterations = :LATENCY_ITERATIONS, 
            bandwidth_iterations = :BANDWIDTH_ITERATIONS, 
            notes  = :NOTES, 
            last_update_date = f_ludate,
            last_updated_by = f_luby,
            last_update_login = 0       
          where test_id = :TEST_ID;
       end if;
     exception
       when no_data_found then
           insert into FND_PERFORMANCE_TESTS (
              test_id,
              test_date,
              batch,
              data_size,
              latency_trials,
              bandwidth_trials,
              latency_iterations,
              bandwidth_iterations,
              notes,
              creation_date,
              created_by,
              last_update_date,
              last_updated_by,
              last_update_login)
            values (
              :TEST_ID,
              to_date(:TEST_DATE,'YYYY/MM/DD'),
              :BATCH,
              :DATA_SIZE,
              :LATENCY_TRIALS,
              :BANDWIDTH_TRIALS,
              :LATENCY_ITERATIONS,
              :BANDWIDTH_ITERATIONS,
              :NOTES,
              f_ludate,
              f_luby,
              f_ludate,
              f_luby,
              0);
     end;
   end; "

UPLOAD FND_PERFORMANCE_RESULTS
  " begin
     declare
       f_luby    number;
       f_ludate  date;
       db_luby   number;
       db_ludate date;
     begin
       -- Translate owner to file_last_updated_by
       f_luby := fnd_load_util.owner_id(:OWNER);

       -- Translate char last_update_date to date
       f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

       select last_updated_by, last_update_date
       into db_luby, db_ludate
       from fnd_performance_results
       where test_id = :TEST_ID
       and type = :TYPE
       and trial_id = :TRIAL_ID;

       if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                     db_ludate, :CUSTOM_MODE)) THEN
          update FND_PERFORMANCE_RESULTS set  
            test_id = :TEST_ID,  
            type = :TYPE,
            trial_id = :TRIAL_ID,
            elapsed_time = :ELAPSED_TIME, 
            start_time = :START_TIME,   
            end_time = :END_TIME,     
            correction_time = :CORRECTION_TIME,
            last_update_date = f_ludate,
            last_updated_by = f_luby,
            last_update_login = 0
          where test_id = :TEST_ID  
          and   type = :TYPE
          and   trial_id = :TRIAL_ID;  
       end if; 
     exception
        when no_data_found then 
           insert into FND_PERFORMANCE_RESULTS (  
              test_id,
              type,
              trial_id,
              elapsed_time,
              start_time,
              end_time,
              correction_time,
              creation_date,
              created_by,
              last_update_date,
              last_updated_by,
              last_update_login)  
           values (  
              :TEST_ID,  
              :TYPE,  
              :TRIAL_ID,  
              :ELAPSED_TIME,  
              :START_TIME,  
              :END_TIME,  
              :CORRECTION_TIME,  
              f_ludate,
              f_luby,
              f_ludate,
              f_luby,
              0);  
     end;
   end;"
