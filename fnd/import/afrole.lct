# $Header: afrole.lct 120.2.12010000.3 2009/03/26 16:31:54 alsosa ship $
#
# afrole.lct -  Security information
#
# Entities
#    FND_RESPONSIBILITY, FND_SECURITY_GROUPS, WF_ROLE, GRANT
#
# PARAMETERS:
#
#  While UPLOADING:
#    CUSTOM_MODE - Controls whether a customized row is updated or not.
#                  "FORCE" is to wipe out any customization.
#                  Any value other than "FORCE" is to preserve customization.
#                  Default value is to preserve customization.
#
#  While DOWNLOADING:
#    GRANT     Entity:
#      GNT_GUID-          Global ID (GUID) for GRANT
#      GNT_MENU_NAME-     menu name
#      GNT_ISN-           instance set name
#      GNT_OBJ_NAME-      object name_
#      PROGRAM_NAME-      program_name
#      PROGRAM_TAG-       program_tag
#
#
#      Note that a new unique GRANT_GUID can be generated by running 
#      the following SQL statement:
#         select sys_guid() from dual;
#    WF_ROLE entity:
#      ROLE_NAME-         role name
#      OWNER_TAG-         owner tag
#      ORIG_SYSTEM-       owning "Orig System"; data source tag 
#    Note: Downloading of WF_ROLE is only supported with Oracle 9i or above.
#
#    FND_SECURITY_GROUPS entity:
#      SECURITY_GROUP_KEY- Security group key
# 
#    FND_RESPONSIBILITY entity:  
#      Note: RESP_KEY is not unique on it's own; it's only unique with
#            APPLICATIION_SHORT_NAME.  It's a two part key.
#
#      RESP_KEY-                Responsibility key 
#      APPLICATIION_SHORT_NAME- Responsibility application short name 
#
COMMENT = "dbdrv: exec fnd bin FNDLOAD bin &phase=daa+54 checkfile:~PROD:~PATH:~FILE &ui_apps 0 Y UPLOAD @FND:patch/115/import/afrole.lct @~PROD:~PATH/~FILE"


DEFINE FND_SECURITY_GROUPS
  KEY	SECURITY_GROUP_KEY	VARCHAR2(30)
  CTX   OWNER                   VARCHAR2(4000)
  BASE  LAST_UPDATE_DATE        VARCHAR2(10)
  TRANS SECURITY_GROUP_NAME	VARCHAR2(80)
  TRANS DESCRIPTION		VARCHAR2(240)
END FND_SECURITY_GROUPS

# Note: RESPONSIBILITY_ID is included here because for seeded responsibilities
#       the ids are hardcoded and must be preserved.  For non-seeded
#       responsibilities, the attribute is left null and new ids are
#       generated upon upload as normal.
DEFINE FND_RESPONSIBILITY
  KEY   APPLICATION_SHORT_NAME	        VARCHAR2(50)
  KEY   RESP_KEY	   		VARCHAR2(30)
  BASE  RESPONSIBILITY_ID	   	VARCHAR2(50)
  TRANS RESPONSIBILITY_NAME	   	VARCHAR2(100)
  CTX   OWNER                      	VARCHAR2(4000)
  BASE  LAST_UPDATE_DATE                VARCHAR2(10)
  BASE  DATA_GROUP_APP_SHORT_NAME  	VARCHAR2(50)
  BASE  DATA_GROUP_NAME		   	VARCHAR2(50)
  BASE  MENU_NAME		   	VARCHAR2(80)
  BASE  START_DATE		   	VARCHAR2(11)
  BASE  END_DATE		   	VARCHAR2(11)
  TRANS DESCRIPTION		   	VARCHAR2(240)
  BASE  GROUP_APP_SHORT_NAME	   	VARCHAR2(50)
  BASE  REQUEST_GROUP_NAME	   	VARCHAR2(30)
  BASE  VERSION			   	VARCHAR2(1)
  BASE  WEB_HOST_NAME		   	VARCHAR2(80)
  BASE  WEB_AGENT_NAME 		   	VARCHAR2(80)
END FND_RESPONSIBILITY


DEFINE WF_ROLE
  KEY   ROLE_NAME               VARCHAR2(320)
  TRANS DISPLAY_NAME            VARCHAR2(360)
  TRANS DESCRIPTION             VARCHAR2(1000)
  BASE  NOTIFICATION_PREFERENCE VARCHAR2(8)
  BASE  LANGUAGE                VARCHAR2(30)
  BASE  TERRITORY               VARCHAR2(30)
  BASE  EMAIL_ADDRESS           VARCHAR2(320)
  BASE  FAX                     VARCHAR2(240)
  BASE  ORIG_SYSTEM             VARCHAR2(30)
  BASE  ORIG_SYSTEM_ID          VARCHAR2(50)
  BASE  START_DATE              VARCHAR2(10)
  BASE  STATUS                  VARCHAR2(8)
  BASE  EXPIRATION_DATE         VARCHAR2(10)
  BASE  SEC_GROUP               REFERENCES FND_SECURITY_GROUPS as SEC_GROUP
  BASE  RESP                    REFERENCES FND_RESPONSIBILITY as RESP_APPSNAME, RESP_KEY
  BASE  LAST_UPDATE_DATE        VARCHAR2(10)
  BASE  OWNER_TAG               VARCHAR2(50)
  CTX   OWNER                   VARCHAR2(4000)

  DEFINE GRANT
    KEY   GRANT_GUID              VARCHAR2(32)
    BASE  GRANTEE_TYPE            VARCHAR2(8)
    BASE  GNT_MENU_NAME           VARCHAR2(30)
    BASE  START_DATE              VARCHAR2(11)
    BASE  END_DATE                VARCHAR2(11)
    BASE  GNT_OBJ_NAME            VARCHAR2(30)
    BASE  INSTANCE_TYPE           VARCHAR2(8)
    BASE  GNT_ISN                 VARCHAR2(30)
    BASE  INSTANCE_PK1_VALUE      VARCHAR2(256)
    BASE  INSTANCE_PK2_VALUE      VARCHAR2(256)
    BASE  INSTANCE_PK3_VALUE      VARCHAR2(256)
    BASE  INSTANCE_PK4_VALUE      VARCHAR2(256)
    BASE  INSTANCE_PK5_VALUE      VARCHAR2(256)
    BASE  PARAMETER1              VARCHAR2(256)
    BASE  PARAMETER2              VARCHAR2(256)
    BASE  PARAMETER3              VARCHAR2(256)
    BASE  PARAMETER4              VARCHAR2(256)
    BASE  PARAMETER5              VARCHAR2(256)
    BASE  PARAMETER6              VARCHAR2(256)
    BASE  PARAMETER7              VARCHAR2(256)
    BASE  PARAMETER8              VARCHAR2(256)
    BASE  PARAMETER9              VARCHAR2(256)
    BASE  PARAMETER10             VARCHAR2(256)
    BASE  CTX_SECURITY_GROUP_KEY  REFERENCES FND_SECURITY_GROUPS as CTX_SECURITY_GROUP_KEY
    BASE  CTX_RSP                 REFERENCES FND_RESPONSIBILITY as CTX_APPSNAME, CTX_RESP_KEY
    BASE  CTX_ORGANIZATION        VARCHAR2(60)
    BASE  PROGRAM_NAME            VARCHAR2(30)
    BASE  PROGRAM_TAG             VARCHAR2(30)
    BASE  LAST_UPDATE_DATE        VARCHAR2(10)
    BASE  NAME                    VARCHAR2(80)
    BASE  DESCRIPTION             VARCHAR2(240)
    CTX   OWNER                   VARCHAR2(4000)
  END GRANT
  
  DEFINE WF_USER_ROLE
    KEY   USER_NAME           VARCHAR2(320)
    KEY   ROLE_NAME           REFERENCES WF_ROLE as ROLE_NAME
    BASE  USER_ORIG_SYSTEM    VARCHAR2(30)
    BASE  USER_ORIG_SYSTEM_ID VARCHAR2(50)
    BASE  ROLE_ORIG_SYSTEM    VARCHAR2(30)
    BASE  ROLE_ORIG_SYSTEM_ID VARCHAR2(50)
    BASE  START_DATE          VARCHAR2(10)
    BASE  EXPIRATION_DATE     VARCHAR2(10)
    CTX   OWNER               VARCHAR2(4000)
    CTX   LAST_UPDATE_DATE    VARCHAR2(10)
  END WF_USER_ROLE

  DEFINE WF_ROLE_HIERARCHY
    KEY   SUPER_NAME         REFERENCES WF_ROLE as SUPER_NAME
    KEY   SUB_NAME           REFERENCES WF_ROLE as SUB_NAME
    CTX   OWNER              VARCHAR2(4000)
    CTX   LAST_UPDATE_DATE   VARCHAR2(10)
    BASE  ENABLED_FLAG       VARCHAR2(1)
  END WF_ROLE_HIERARCHY

  DEFINE FND_LOOKUP_ASSIGNMENTS
    KEY   LOOKUP_CODE           REFERENCES FND_LOOKUP_VALUE AS LOOKUP_TYPE,LOOKUP_CODE
    BASE  OBJ_NAME              VARCHAR2(30)
    BASE  INSTANCE_PK1_VALUE    REFERENCES WF_ROLE AS INSTANCE_PK1_VALUE
    BASE  INSTANCE_PK2_VALUE    VARCHAR2(320)
    BASE  INSTANCE_PK3_VALUE    VARCHAR2(320)
    BASE  INSTANCE_PK4_VALUE    VARCHAR2(320)
    BASE  INSTANCE_PK5_VALUE    VARCHAR2(320)
    BASE  DISPLAY_SEQUENCE      VARCHAR2(50)
    CTX   OWNER                 VARCHAR2(4000)
    CTX   LAST_UPDATE_DATE      VARCHAR2(10)
  END FND_LOOKUP_ASSIGNMENTS

END WF_ROLE

DEFINE FND_LOOKUP_VALUE
  KEY   LOOKUP_TYPE                     VARCHAR2(30)
  KEY   LOOKUP_CODE                     VARCHAR2(30)
  BASE  VIEW_APPSNAME                   VARCHAR2(50)
  BASE  ENABLED_FLAG                    VARCHAR2(1)
  BASE  START_DATE_ACTIVE               VARCHAR2(10)
  BASE  END_DATE_ACTIVE                 VARCHAR2(10)
  BASE  TERRITORY_CODE                  VARCHAR2(2)
  BASE  TAG                             VARCHAR2(150)
  BASE  ATTRIBUTE_CATEGORY              VARCHAR2(30)
  BASE  ATTRIBUTE1                      VARCHAR2(150)
  BASE  ATTRIBUTE2                      VARCHAR2(150)
  BASE  ATTRIBUTE3                      VARCHAR2(150)
  BASE  ATTRIBUTE4                      VARCHAR2(150)
  BASE  ATTRIBUTE5                      VARCHAR2(150)
  BASE  ATTRIBUTE6                      VARCHAR2(150)
  BASE  ATTRIBUTE7                      VARCHAR2(150)
  BASE  ATTRIBUTE8                      VARCHAR2(150)
  BASE  ATTRIBUTE9                      VARCHAR2(150)
  BASE  ATTRIBUTE10                     VARCHAR2(150)
  BASE  ATTRIBUTE11                     VARCHAR2(150)
  BASE  ATTRIBUTE12                     VARCHAR2(150)
  BASE  ATTRIBUTE13                     VARCHAR2(150)
  BASE  ATTRIBUTE14                     VARCHAR2(150)
  BASE  ATTRIBUTE15                     VARCHAR2(150)
  CTX   OWNER                           VARCHAR2(4000)
  BASE  LAST_UPDATE_DATE                VARCHAR2(10)
  TRANS MEANING                         VARCHAR2(80)
  TRANS DESCRIPTION                     VARCHAR2(240)
END FND_LOOKUP_VALUE

# Note this download allows the "fake" role 'GLOBAL' to be downloaded
# to support grants even though that role does not exist in the table.
# Added fake ad-hoc role ZZZ_LAST_DUMMY_ROLE for post upload processing purposes.
DOWNLOAD WF_ROLE
"select NAME ROLE_NAME, DISPLAY_NAME, DESCRIPTION, NOTIFICATION_PREFERENCE,
          LANGUAGE, TERRITORY, EMAIL_ADDRESS, FAX, ORIG_SYSTEM,
          ORIG_SYSTEM_ID,
          to_char(START_DATE, 'YYYY/MM/DD') START_DATE,
          STATUS,
          to_char(EXPIRATION_DATE, 'YYYY/MM/DD') EXPIRATION_DATE,
          substrb(
             decode(ORIG_SYSTEM,
                 'FND_RESP',
                  substr(NAME,  /* Val after the last separator */
                         INSTR(NAME, '|', 1, 3)+1), ''),
             1, 30) 
           SEC_GROUP,
          substrb(
            decode(ORIG_SYSTEM,
                 'FND_RESP',
                  substr(NAME,  /* Val between 1nd and 2rd separator */
                         INSTR(NAME, '|', 1, 1)+1,
                         ( INSTR(NAME, '|', 1, 2)
                          -INSTR(NAME, '|', 1, 1)-1)),
                 ''),
             1, 50)
            RESP_APPSNAME,
          substrb(
             decode(ORIG_SYSTEM,
                 'FND_RESP',
                  substr(NAME,  /* Val between 2nd and  3rd separator*/
                                INSTR(NAME, '|', 1, 2)+1,
                                 ( INSTR(NAME, '|', 1, 3)
                                   -INSTR(NAME, '|', 1, 2)-1)),
                 ''),
             1, 30)
            RESP_KEY,  
          to_char(LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
          OWNER_TAG,
          fnd_load_util.owner_name(LAST_UPDATED_BY) OWNER
          from   WF_LOCAL_ROLES
   where  (:ROLE_NAME is null or
             (     :ROLE_NAME is not null 
               and NAME like :ROLE_NAME
               and :ROLE_NAME <> 'GLOBAL'
               and :ROLE_NAME <> 'ZZZ_LAST_DUMMY_ROLE'))
          and (:OWNER_TAG is null or
                (    :OWNER_TAG is not null 
                 and OWNER_TAG like :OWNER_TAG))
          and (:ORIG_SYSTEM is null or
                (    :ORIG_SYSTEM is not null 
                 and ORIG_SYSTEM like :ORIG_SYSTEM))
          
union all  select  'GLOBAL' ROLE_NAME, 'GLOBAL' DISPLAY_NAME, 
          'This is a Loader-only psuedorole.  Not in table.' DESCRIPTION, 
          'MAILHTML' NOTIFICATION_PREFERENCE,
          'US' LANGUAGE, 
          'AMERICA' TERRITORY, 
          '' EMAIL_ADDRESS, 
          '' FAX, 
          'FND_RESP' ORIG_SYSTEM,
          -999999 ORIG_SYSTEM_ID,
          '1951/01/01' START_DATE,
          '' STATUS,
          to_char('', 'YYYY/MM/DD') EXPIRATION_DATE,
          '' SEC_GROUP,
          '' RESP_APPSNAME,
          '' RESP_KEY,
          to_char(sysdate, 'YYYY/MM/DD') LAST_UPDATE_DATE,
          'AFROLE.LCT' OWNER_TAG,
          'ORACLE' OWNER
          from  dual
   where      (:ROLE_NAME = 'GLOBAL') 
          and (:OWNER_TAG is null or
                (    :OWNER_TAG is not null 
                 and 'AFROLE.LCT' like :OWNER_TAG))
          and (:ORIG_SYSTEM is null or
                (    :ORIG_SYSTEM is not null 
                 and 'FND_RESP' like :ORIG_SYSTEM))
union all select 'ZZZ_LAST_DUMMY_ROLE' ROLE_NAME, 'ZZZ_LAST_DUMMY_ROLE' DISPLAY_NAME, 
          'This is a fake role for post UPLOAD processing only. Not in table.' DESCRIPTION, 
          'MAILHTML' NOTIFICATION_PREFERENCE,
          'US' LANGUAGE, 
          'AMERICA' TERRITORY, 
          '' EMAIL_ADDRESS, 
          '' FAX, 
          'WF_LOCAL_ROLES' ORIG_SYSTEM,
          0 ORIG_SYSTEM_ID,
          '1951/01/01' START_DATE,
          '' STATUS,
          to_char(SYSDATE-1, 'YYYY/MM/DD') EXPIRATION_DATE,
          '' SEC_GROUP,
          '' RESP_APPSNAME,
          '' RESP_KEY,
          to_char(sysdate, 'YYYY/MM/DD') LAST_UPDATE_DATE,
          'AFROLE.LCT' OWNER_TAG,
          'ORACLE' OWNER
          from  dual
order by ROLE_NAME ASC
" 

DOWNLOAD GRANT
  " select rawtohex(g.grant_guid) grant_guid,
           g.grantee_type,
           m.menu_name,
           to_char(g.start_date, 'YYYY/MM/DD') start_date,
           to_char(g.end_date, 'YYYY/MM/DD') end_date,
           decode(g.object_id, -1, 'GLOBAL', o.obj_name),  
           g.instance_type,
           i.instance_set_name,
           g.instance_pk1_value,
           g.instance_pk2_value,
           g.instance_pk3_value,
           g.instance_pk4_value,
           g.instance_pk5_value,
           g.parameter1,
           g.parameter2,
           g.parameter3,
           g.parameter4,
           g.parameter5,
           g.parameter6,
           g.parameter7,
           g.parameter8,
           g.parameter9,
           g.parameter10,
           decode (g.ctx_secgrp_id, -1, '*GLOBAL*', secgrps.security_group_key)
               ctx_security_group_key,
           decode (g.ctx_resp_appl_id, -1, '*GLOBAL*', 
                   respapp.application_short_name) 
               ctx_resp_appsname,
           decode (g.ctx_resp_id, -1, '*GLOBAL*', resp.responsibility_key)
               ctx_resp_key,
           decode (g.ctx_org_id, -1, '*GLOBAL*', g.ctx_org_id) 
               ctx_organization,
           g.program_name,
           g.program_tag,
  	   to_char(g.last_update_date, 'YYYY/MM/DD') last_update_date,
           g.name,
           g.description,
           fnd_load_util.owner_name(g.LAST_UPDATED_BY) OWNER,
           decode(g.grantee_type, 'GLOBAL', 'GLOBAL', g.grantee_key) NAME
   from   fnd_object_instance_sets_vl i,  
          fnd_objects_vl o,
          fnd_menus_vl m,
          fnd_grants g,
          fnd_security_groups secgrps,
          fnd_responsibility resp,
          fnd_application respapp
   where  g.object_id = o.object_id (+)
   and    g.ctx_secgrp_id = secgrps.security_group_id (+)
   and    g.ctx_resp_id = resp.responsibility_id (+)
   and    g.ctx_resp_appl_id = resp.application_id (+)
   and    g.ctx_resp_appl_id = respapp.application_id (+)
   and    g.instance_set_id = i.instance_set_id (+)
   and    g.menu_id = m.menu_id
   and  ((:GNT_MENU_NAME is NULL) or
             ((:GNT_MENU_NAME is not NULL) AND 
              (m.menu_name like :GNT_MENU_NAME)))
   and  ((:GNT_GRANTEE_KEY is NULL) or
             ((:GNT_GRANTEE_KEY is not NULL) AND 
              (g.grantee_key like :GNT_GRANTEE_KEY)))
   and  ((:ROLE_NAME is NULL) or
             ((:ROLE_NAME is not NULL) AND 
              (g.grantee_key like :ROLE_NAME)))
   and  ((:GNT_GRANTEE_TYPE is NULL) or
             ((:GNT_GRANTEE_TYPE is not NULL) AND 
              (g.grantee_type like :GNT_GRANTEE_TYPE)))
   and  ((:GNT_INSTANCE_PK1_VALUE is NULL) or
             ((:GNT_INSTANCE_PK1_VALUE is not NULL) AND 
              (g.instance_pk1_value like :GNT_INSTANCE_PK1_VALUE)))
   and  ((:GNT_INSTANCE_PK2_VALUE is NULL) or
             ((:GNT_INSTANCE_PK2_VALUE is not NULL) AND 
              (g.instance_pk2_value like :GNT_INSTANCE_PK2_VALUE)))
   and  ((:GNT_INSTANCE_PK3_VALUE is NULL) or
             ((:GNT_INSTANCE_PK3_VALUE is not NULL) AND 
              (g.instance_pk3_value like :GNT_INSTANCE_PK3_VALUE)))
   and  ((:GNT_INSTANCE_PK4_VALUE is NULL) or
             ((:GNT_INSTANCE_PK4_VALUE is not NULL) AND 
              (g.instance_pk4_value like :GNT_INSTANCE_PK4_VALUE)))
   and  ((:GNT_INSTANCE_PK5_VALUE is NULL) or
             ((:GNT_INSTANCE_PK5_VALUE is not NULL) AND 
              (g.instance_pk5_value like :GNT_INSTANCE_PK5_VALUE)))
   and  ((:GNT_PARAMETER1 is NULL) or
             ((:GNT_PARAMETER1 is not NULL) AND 
              (g.parameter1 like :GNT_PARAMETER1)))
   and  ((:GNT_PARAMETER2 is NULL) or
             ((:GNT_PARAMETER2 is not NULL) AND 
              (g.parameter2 like :GNT_PARAMETER2)))
   and  ((:GNT_PARAMETER3 is NULL) or
             ((:GNT_PARAMETER3 is not NULL) AND 
              (g.parameter3 like :GNT_PARAMETER3)))
   and  ((:GNT_PARAMETER4 is NULL) or
             ((:GNT_PARAMETER4 is not NULL) AND 
              (g.parameter4 like :GNT_PARAMETER4)))
   and  ((:GNT_PARAMETER5 is NULL) or
             ((:GNT_PARAMETER5 is not NULL) AND 
              (g.parameter5 like :GNT_PARAMETER5)))
   and  ((:GNT_ISN is NULL) or
             ((:GNT_ISN is not NULL) AND 
              (i.instance_set_name like :GNT_ISN)))
   and    ((:GNT_OBJ_NAME is NULL) or
             ((:GNT_OBJ_NAME is not NULL) 
                 AND (o.obj_name like :GNT_OBJ_NAME)) or
             ((:GNT_OBJ_NAME = 'GLOBAL') 
                 AND (g.object_id = -1)))
   and    ((:GNT_GUID is NULL) or
             ((:GNT_GUID is not NULL) 
                 AND (g.grant_guid like :GNT_GUID)))
   and    ((:GNT_NAME is NULL) or
             ((:GNT_NAME is not NULL) 
                 AND (g.name like :GNT_NAME)))
   and    ((:PROGRAM_NAME is NULL) or
             ((:PROGRAM_NAME is not NULL) 
                 AND (g.program_name like :PROGRAM_NAME)))
   and    ((:PROGRAM_TAG is NULL) or
             ((:PROGRAM_TAG is not NULL) 
                 AND (g.program_tag like :PROGRAM_TAG)))
"

DOWNLOAD FND_SECURITY_GROUPS
  "select SECURITY_GROUP_KEY,
          fnd_load_util.owner_name(LAST_UPDATED_BY) OWNER,
          to_char(LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
          SECURITY_GROUP_NAME,
   	  DESCRIPTION
   from   FND_SECURITY_GROUPS_VL
   where  (:SECURITY_GROUP_KEY is null or
             (:SECURITY_GROUP_KEY is not null and
                  SECURITY_GROUP_KEY like :SECURITY_GROUP_KEY)) "

DOWNLOAD FND_RESPONSIBILITY
  "select A.APPLICATION_SHORT_NAME,
   	  RV.RESPONSIBILITY_KEY,
          decode(RV.CREATED_BY, 1, to_char(RV.RESPONSIBILITY_ID), null),
   	  RV.RESPONSIBILITY_NAME,
          fnd_load_util.owner_name(RV.LAST_UPDATED_BY) OWNER,
          to_char(RV.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
   	  ADG.APPLICATION_SHORT_NAME DATA_GROUP_APP,
   	  DG.DATA_GROUP_NAME,
   	  M.MENU_NAME,
          TO_CHAR(RV.START_DATE, 'YYYY/MM/DD') START_DATE,
          nvl(TO_CHAR(RV.END_DATE, 'YYYY/MM/DD'), 
              substrb(fnd_load_util.null_value,1,11)) END_DATE,
   	  RV.DESCRIPTION,
   	  ARG.APPLICATION_SHORT_NAME REQUEST_GROUP_APP,
   	  RG.REQUEST_GROUP_NAME,
   	  RV.VERSION,
   	  nvl(RV.WEB_HOST_NAME, 
              substrb(fnd_load_util.null_value,1,80)) WEB_HOST_NAME,
   	  nvl(RV.WEB_AGENT_NAME, 
               substrb(fnd_load_util.null_value,1,80)) WEB_AGENT_NAME
   from	  FND_RESPONSIBILITY_VL RV,
   	  FND_APPLICATION A,
   	  FND_MENUS M,
   	  FND_APPLICATION ADG,
   	  FND_DATA_GROUPS DG,
   	  FND_APPLICATION ARG,
   	  FND_REQUEST_GROUPS RG
   where  A.APPLICATION_ID = RV.APPLICATION_ID
   and	  ADG.APPLICATION_ID = RV.DATA_GROUP_APPLICATION_ID
   and	  DG.DATA_GROUP_ID = RV.DATA_GROUP_ID
   and	  ARG.APPLICATION_ID (+) = RV.GROUP_APPLICATION_ID
   and	  RG.REQUEST_GROUP_ID (+) = RV.REQUEST_GROUP_ID
   and	  RG.APPLICATION_ID (+) = RV.GROUP_APPLICATION_ID
   and	  M.MENU_ID = RV.MENU_ID
   and	  RV.VERSION IS NOT NULL
   and	  (:RESP_KEY is null or (:RESP_KEY is not null
		and RV.RESPONSIBILITY_KEY like :RESP_KEY))
   and    (:APPLICATION_SHORT_NAME is null or
             (:APPLICATION_SHORT_NAME is not null and
                A.APPLICATION_SHORT_NAME like :APPLICATION_SHORT_NAME)) 
   and    ((    :DATA_GROUP_NAME is null 
            and DG.DATA_GROUP_NAME = 'Standard') or
           (    :DATA_GROUP_NAME is not null 
            and DG.DATA_GROUP_NAME like :DATA_GROUP_NAME))"


# -- WF_ROLE_HIERARCHY
# --
# -- Downloading all superior hierarchical relationships that this role 
# -- participates in.
DOWNLOAD WF_ROLE_HIERARCHY
  "select     WRH.SUPER_NAME,
              WRH.SUB_NAME,
              FND_LOAD_UTIL.Owner_Name(WRH.LAST_UPDATED_BY) OWNER,
              to_char(WRH.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
              WRH.ENABLED_FLAG
   from       WF_ROLE_HIERARCHIES WRH, WF_ROLES WR
   where      WRH.SUB_NAME = WR.NAME
   and        WR.ORIG_SYSTEM in ('FND_RESP', 'UMX')
   connect by WRH.SUPER_NAME = WRH.SUB_NAME
   start with WRH.SUB_NAME = :ROLE_NAME"
   
   
# -- WF_USER_ROLE
# --
# -- Downloading all user/role relationships that this role participates in.
DOWNLOAD WF_USER_ROLE
  "select WUR.USER_NAME,
          WUR.ROLE_NAME,
          WUR.USER_ORIG_SYSTEM,
          WUR.USER_ORIG_SYSTEM_ID,
          WUR.ROLE_ORIG_SYSTEM,
          WUR.ROLE_ORIG_SYSTEM_ID,
	  to_char(WUR.START_DATE,'YYYY/MM/DD') START_DATE,
	  to_char(WUR.EXPIRATION_DATE,'YYYY/MM/DD') EXPIRATION_DATE,
          FND_LOAD_UTIL.Owner_Name(WUR.LAST_UPDATED_BY) OWNER,
          to_char(WUR.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE
   from   WF_LOCAL_USER_ROLES WUR
   where  (WUR.ROLE_NAME = :ROLE_NAME)
   and    (:INCLUDE_USER_ROLES is not null and
             :INCLUDE_USER_ROLES = 'Y')
   and    WUR.ASSIGNMENT_TYPE = 'D'
   and    WUR.USER_ORIG_SYSTEM in ('FND_USR', 'PER')"
   

#-- FND_LOOKUP_ASSIGNMENTS - Role Category
#--
DOWNLOAD FND_LOOKUP_ASSIGNMENTS
  "select LA.LOOKUP_TYPE,
          LA.LOOKUP_CODE,
          LA.OBJ_NAME,
          LA.INSTANCE_PK1_VALUE,
          LA.INSTANCE_PK2_VALUE,
          LA.INSTANCE_PK3_VALUE,
          LA.INSTANCE_PK4_VALUE,
          LA.INSTANCE_PK5_VALUE,
          TO_CHAR(LA.DISPLAY_SEQUENCE),
          fnd_load_util.owner_name(LA.LAST_UPDATED_BY) OWNER,
          to_char(LA.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE
    from  FND_LOOKUP_ASSIGNMENTS LA
    where (LA.INSTANCE_PK1_VALUE = :ROLE_NAME)
    and   LA.OBJ_NAME = 'UMX_ACCESS_ROLE'
    and   LA.LOOKUP_TYPE = 'UMX_CATEGORY_LOOKUP'
  "

#-- FND_LOOKUP_VALUES
#--
DOWNLOAD FND_LOOKUP_VALUE
  "select LV.LOOKUP_TYPE,
          LV.LOOKUP_CODE,
          VA.APPLICATION_SHORT_NAME VIEW_APPSNAME,
          LV.ENABLED_FLAG,
          TO_CHAR(LV.START_DATE_ACTIVE, 'YYYY/MM/DD') START_DATE_ACTIVE,
          TO_CHAR(LV.END_DATE_ACTIVE, 'YYYY/MM/DD') END_DATE_ACTIVE,
          LV.TERRITORY_CODE,
          LV.TAG,
          LV.ATTRIBUTE_CATEGORY,
          LV.ATTRIBUTE1,
          LV.ATTRIBUTE2,
          LV.ATTRIBUTE3,
          LV.ATTRIBUTE4,
          LV.ATTRIBUTE5,
          LV.ATTRIBUTE6,
          LV.ATTRIBUTE7,
          LV.ATTRIBUTE8,
          LV.ATTRIBUTE9,
          LV.ATTRIBUTE10,
          LV.ATTRIBUTE11,
          LV.ATTRIBUTE12,
          LV.ATTRIBUTE13,
          LV.ATTRIBUTE14,
          LV.ATTRIBUTE15,
          fnd_load_util.owner_name(LV.LAST_UPDATED_BY) OWNER,
          to_char(LV.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
          LV.MEANING,
          LV.DESCRIPTION
   from   FND_LOOKUP_VALUES_VL LV,
          FND_APPLICATION VA,
          FND_SECURITY_GROUPS SG
   where  VA.APPLICATION_ID = LV.VIEW_APPLICATION_ID
   and    LV.LOOKUP_TYPE = 'UMX_CATEGORY_LOOKUP'
   and    ((:LOOKUP_CODE is not NULL) AND
              (LV.LOOKUP_CODE like :LOOKUP_CODE))
   and    SG.SECURITY_GROUP_ID = LV.SECURITY_GROUP_ID
   order by LV.LAST_UPDATE_DATE "
   
UPLOAD WF_ROLE
BEGIN
    " declare  
        wf_parameters wf_parameter_list_t;
      begin 
      null;      
        if (:ROLE_NAME = 'GLOBAL' or :ROLE_NAME='ZZZ_LAST_DUMMY_ROLE') then 
          null; /* 'GLOBAL' is a dummy for loaders only.  not table */
        else
     /*ensure that orig systems that can bulk-synchronize are not allowed*/
     if ((:ORIG_SYSTEM is not null) and 
      (WF_ROLE_HIERARCHY.HierarchyEnabled(:ORIG_SYSTEM))) then
          if (:UPLOAD_MODE = 'NLS') then  
            wf_parameters := NULL;
            wf_event.AddParameterToList('USER_NAME',
                                   :ROLE_NAME , wf_parameters);
            wf_event.AddParameterToList('DISPLAYNAME',
                                     :DISPLAY_NAME, wf_parameters);
            wf_event.AddParameterToList('DESCRIPTION',
                                     :DESCRIPTION, wf_parameters);
            wf_local_synch.propagate_role(p_orig_system=>:ORIG_SYSTEM,
                             p_orig_system_id=>:ORIG_SYSTEM_ID,
                             p_attributes=> wf_parameters);
          else
            wf_parameters := NULL;
            wf_event.AddParameterToList('USER_NAME',
                                     :ROLE_NAME , wf_parameters);
            wf_event.AddParameterToList('DISPLAYNAME',
                                     :DISPLAY_NAME, wf_parameters);
            wf_event.AddParameterToList('DESCRIPTION',
                                     :DESCRIPTION, wf_parameters);
            wf_event.AddParameterToList('NOTIFICATION_PREFERENCE', 
                                     :NOTIFICATION_PREFERENCE, wf_parameters);
            wf_event.AddParameterToList('EMAIL_ADDRESS', 
                                     :EMAIL_ADDRESS, wf_parameters);
            wf_event.AddParameterToList('FAX', 
                                     :FAX, wf_parameters);
            wf_event.AddParameterToList('STATUS', 
                                     :STATUS, wf_parameters);
            wf_event.AddParameterToList('RAISEERRORS', 
                                     'TRUE', wf_parameters);
            wf_event.AddParameterToList('OWNER_TAG', 
                                     :OWNER_TAG, wf_parameters);
            wf_local_synch.propagate_role(p_orig_system=>:ORIG_SYSTEM,
                             p_orig_system_id=>:ORIG_SYSTEM_ID,
                             p_attributes=> wf_parameters,
                             p_start_date=>to_date(:START_DATE, 'YYYY/MM/DD'),
                             p_expiration_date=>to_date(:EXPIRATION_DATE,
                                                              'YYYY/MM/DD'));
          end if;
         end if;
        end if;
       end;  
"
END
"
  begin
    /* Bug 7437653: Submit a request if one hasn't already been submitted to propagate workflow role hierarchy */
    if (:ROLE_NAME = 'ZZZ_LAST_DUMMY_ROLE') then
      declare
        l_req_submitted number;
      begin
        select nvl(count(1), 0) into l_req_submitted
        from   fnd_concurrent_requests fcr, fnd_concurrent_programs fcp
        where  fcr.concurrent_program_id=fcp.concurrent_program_id 
        and    fcp.concurrent_program_name = 'FNDWFDSRHP'
        and    fcr.phase_code='P' -- Pending
        and    fcr.status_code = 'I' -- Normal
        and    fcr.argument_text='ALL';
        if (l_req_submitted = 0) then -- No program is scheduled already
          if (FND_REQUEST.Submit_Request(APPLICATION=>'FND', PROGRAM=>'FNDWFDSRHP', argument1 => 'ALL',
		      DESCRIPTION=>'Submitted by afrole.lct via FNDLOAD')=-1) then
            WF_LOG_PKG.String(WF_LOG_PKG.LEVEL_UNEXPECTED, 'FND_REQUEST.Submit_Request', 'Call to FNDWFDSRHP failed!');
          end if;
        end if;
      end;	 
    end if;
  end;
"

UPLOAD GRANT
  " begin  
      declare  
        app_id   number     := 0;  
      begin       
        if (:UPLOAD_MODE = 'NLS') then  
          null; /* There are no translated columns in NLS mode, so nothing*/
                /* to do in NLS mode. */
        else

          fnd_grants_pkg.load_row(
            x_grant_guid => :GRANT_GUID,
            x_grantee_type => :GRANTEE_TYPE,
            x_grantee_key => :ROLE_NAME,
            x_menu_name => :GNT_MENU_NAME,
            x_start_date => :START_DATE,
            x_end_date => :END_DATE,
            x_obj_name => :GNT_OBJ_NAME,
            x_instance_type => :INSTANCE_TYPE,
            x_instance_set_name => :GNT_ISN,
            x_instance_pk1_value => :INSTANCE_PK1_VALUE,
            x_instance_pk2_value => :INSTANCE_PK2_VALUE,
            x_instance_pk3_value => :INSTANCE_PK3_VALUE,
            x_instance_pk4_value => :INSTANCE_PK4_VALUE,
            x_instance_pk5_value => :INSTANCE_PK5_VALUE,
            x_parameter1 => :PARAMETER1,
            x_parameter2 => :PARAMETER2,
            x_parameter3 => :PARAMETER3,
            x_parameter4 => :PARAMETER4,
            x_parameter5 => :PARAMETER5,
            x_parameter6 => :PARAMETER6,
            x_parameter7 => :PARAMETER7,
            x_parameter8 => :PARAMETER8,
            x_parameter9 => :PARAMETER9,
            x_parameter10 => :PARAMETER10,
            x_ctx_security_group_key => :CTX_SECURITY_GROUP_KEY,
            x_ctx_resp_app_short_name => :CTX_APPSNAME,
            x_ctx_resp_key => :CTX_RESP_KEY,
            x_ctx_organization => :CTX_ORGANIZATION,
            x_program_name => :PROGRAM_NAME,
            x_program_tag => :PROGRAM_TAG,
            x_owner => :OWNER,
            x_custom_mode => :CUSTOM_MODE, 
	    x_last_update_date => :LAST_UPDATE_DATE,
            x_name => :NAME,
            x_description => :DESCRIPTION);

        end if;
      end;  
    end; 
"

UPLOAD FND_SECURITY_GROUPS
 "declare
    v_db_owner_id number;

  begin
    if (:UPLOAD_MODE = 'NLS') then
      fnd_security_groups_pkg.TRANSLATE_ROW (
        :SECURITY_GROUP_KEY,
        :OWNER,
        :SECURITY_GROUP_NAME,
        :DESCRIPTION, 
        :CUSTOM_MODE,
        :LAST_UPDATE_DATE);
    else
      fnd_security_groups_pkg.LOAD_ROW (
          :SECURITY_GROUP_KEY,
          :OWNER,
          :SECURITY_GROUP_NAME,
          :DESCRIPTION,
          :CUSTOM_MODE,
          :LAST_UPDATE_DATE );
    end if;
  end; "



UPLOAD FND_RESPONSIBILITY
  "declare
     v_db_owner_id number;
     v_app_id number;
     v_resp_id number;

   begin
    if (:UPLOAD_MODE = 'NLS') then
      fnd_responsibility_pkg.TRANSLATE_ROW (
        :APPLICATION_SHORT_NAME,
        :RESP_KEY,
        :RESPONSIBILITY_NAME,
        :DESCRIPTION,
        :OWNER,
        :CUSTOM_MODE,
        :LAST_UPDATE_DATE);
    else
        fnd_responsibility_pkg.LOAD_ROW (
          :APPLICATION_SHORT_NAME,
          :RESP_KEY,
          :RESPONSIBILITY_ID,
          :RESPONSIBILITY_NAME,
          :OWNER,
          :DATA_GROUP_APP_SHORT_NAME,
          :DATA_GROUP_NAME,
          :MENU_NAME,
          :START_DATE,
          :END_DATE,
          :DESCRIPTION,
          :GROUP_APP_SHORT_NAME,
          :REQUEST_GROUP_NAME,
          :VERSION,
          :WEB_HOST_NAME,
          :WEB_AGENT_NAME,
          :CUSTOM_MODE,
          :LAST_UPDATE_DATE );
     end if;
  end; "


UPLOAD WF_ROLE_HIERARCHY
  "declare
     id   number;
   begin
    --WF_ROLE_HIERARCHIES is not NLS sensitive so no upload_mode handling 
    --needed.
     id := WF_ROLE_HIERARCHY.AddRelationship(p_sub_name=>:SUB_NAME,
                                       p_super_name=>:SUPER_NAME,
				       p_defermode=>TRUE,
				       p_enabled=>:ENABLED_FLAG);
   exception
     when others then
       if (wf_core.error_name='WFDS_DUP_HIERARCHY') then
        --ignore this error
        null;
       else
        --raise it 
        raise;
       end if;
   end;"


UPLOAD WF_USER_ROLE
  "begin
    --WF_USER_ROLES is not NLS sensitive so no upload_mode handling 
    --needed.
    WF_LOCAL_SYNCH.PropagateUserRole(p_user_name=>:USER_NAME,
                     p_role_name=>:ROLE_NAME,
		     p_start_date=> to_date(:START_DATE,'YYYY/MM/DD'),
                     p_expiration_date=>to_date(:EXPIRATION_DATE,'YYYY/MM/DD'),
                     p_raiseerrors=>TRUE);
                                      
  end;"


UPLOAD FND_LOOKUP_VALUE
   " declare
       view_appid number;

       cursor secgrp_curs is
         select SG.SECURITY_GROUP_ID
         from FND_LOOKUP_TYPES LT, FND_SECURITY_GROUPS SG
         where LT.LOOKUP_TYPE = :LOOKUP_TYPE
         and LT.VIEW_APPLICATION_ID = view_appid
         and LT.SECURITY_GROUP_ID = SG.SECURITY_GROUP_ID
         and SG.SECURITY_GROUP_KEY like nvl(:SECURITY_GROUP, 'STANDARD');

     begin
       if (:UPLOAD_MODE = 'NLS') then
         select APPLICATION_ID
         into view_appid
         from FND_APPLICATION
         where APPLICATION_SHORT_NAME = :VIEW_APPSNAME;

         -- Do NLS updates in all matching security groups.
         for secgrp in secgrp_curs loop
           fnd_lookup_values_pkg.TRANSLATE_ROW(
             x_lookup_type         => :LOOKUP_TYPE,
             x_security_group_id   => secgrp.security_group_id,
             x_view_application_id => view_appid,
             x_owner               => :OWNER,
             x_meaning             => :MEANING,
             x_description         => :DESCRIPTION,
             x_lookup_code         => :LOOKUP_CODE,
             x_last_update_date    => :LAST_UPDATE_DATE,
             x_custom_mode         => :CUSTOM_MODE);
         end loop;
       else
         fnd_lookup_values_pkg.Load_Row(
           x_lookup_type        => :LOOKUP_TYPE,
           x_view_appsname      => :VIEW_APPSNAME,
           x_lookup_code        => :LOOKUP_CODE,
           x_enabled_flag       => :ENABLED_FLAG,
           x_start_date_active  => :START_DATE_ACTIVE,
           x_end_date_active    => :END_DATE_ACTIVE,
           x_territory_code     => :TERRITORY_CODE,
           x_tag                => :TAG,
           x_attribute_category => :ATTRIBUTE_CATEGORY,
           x_attribute1         => :ATTRIBUTE1,
           x_attribute2         => :ATTRIBUTE2,
           x_attribute3         => :ATTRIBUTE3,
           x_attribute4         => :ATTRIBUTE4,
           x_attribute5         => :ATTRIBUTE5,
           x_attribute6         => :ATTRIBUTE6,
           x_attribute7         => :ATTRIBUTE7,
           x_attribute8         => :ATTRIBUTE8,
           x_attribute9         => :ATTRIBUTE9,
           x_attribute10        => :ATTRIBUTE10,
           x_attribute11        => :ATTRIBUTE11,
           x_attribute12        => :ATTRIBUTE12,
           x_attribute13        => :ATTRIBUTE13,
           x_attribute14        => :ATTRIBUTE14,
           x_attribute15        => :ATTRIBUTE15,
           x_last_update_date   => :LAST_UPDATE_DATE,
           x_owner              => :OWNER,
           x_meaning            => :MEANING,
           x_description        => :DESCRIPTION,
           x_security_group     => :SECURITY_GROUP,
           x_custom_mode        => :CUSTOM_MODE);
       end if;
     end; "

UPLOAD FND_LOOKUP_ASSIGNMENTS
"begin
      declare
        app_id   number     := 0;
       begin
        if (:UPLOAD_MODE = 'NLS') then
          null; /* There are no translated columns in NLS mode, so nothing*/
                /* to do in NLS mode. */
        else
          fnd_lookup_assignments_pkg.load_row(
            x_lookup_code => :LOOKUP_CODE,
            x_lookup_type => :LOOKUP_TYPE,
            x_obj_name => :OBJ_NAME,
            x_display_sequence => :DISPLAY_SEQUENCE,
            x_instance_pk1_value => :INSTANCE_PK1_VALUE,
            x_instance_pk2_value => :INSTANCE_PK2_VALUE,
            x_instance_pk3_value => :INSTANCE_PK3_VALUE,
            x_instance_pk4_value => :INSTANCE_PK4_VALUE,
            x_instance_pk5_value => :INSTANCE_PK5_VALUE,
            x_owner => :OWNER,
            x_custom_mode => :CUSTOM_MODE,
            x_last_update_date => :LAST_UPDATE_DATE);
        end if;
       end;
      end; "



