#
#
#
#
#
#  CUSTOMIZACIONES
#
#    IMPORTANTE
#
#    SE DEBEG COPIAR EL ARCHIVO LCT afffload.lct  DE $FND_TOP/patch/115/import
#
#    Y MODIFICAR EL DOWNLOAD DE VALUE_SETS agregando 1 = 2 en la clausula WHERE
#
#    COMO EJEMPLO SE PUEDE BUSCAR LA LEYENDA "CUSTOMIZACIONES_ARGENTINA" EN ESTE
#
#    DOCUMENTO
#
#
#
#
#
#
#
#
# $Header: afscprof.lct 115.35 2004/09/06 11:32:25 skghosh ship $
#
# afscprof.lct -  Profile Options Loader Configuration
#
# Entities -
#
#    PROFILE				- FND_PROFILE_OPTIONS
#       FND_PROFILE_OPTION_VALUES	- and their values
#
COMMENT = "dbdrv: exec fnd bin FNDLOAD bin &phase=daa+70 checkfile:~PROD:~PATH:~FILE &ui_apps 0 Y UPLOAD @FND:patch/115/import/afscprof.lct @~PROD:~PATH/~FILE"

DEFINE PROFILE
  KEY   PROFILE_NAME 			VARCHAR2(80)
  CTX   OWNER                           VARCHAR2(4000)
  BASE  LAST_UPDATE_DATE                VARCHAR2(10)
  CTX   APPLICATION_SHORT_NAME 		VARCHAR2(50)
  TRANS USER_PROFILE_OPTION_NAME 	VARCHAR2(240)
  TRANS DESCRIPTION 			VARCHAR2(240)
  BASE  USER_CHANGEABLE_FLAG 		VARCHAR2(1)
  BASE  USER_VISIBLE_FLAG 		VARCHAR2(1)
  BASE  READ_ALLOWED_FLAG 		VARCHAR2(1)
  BASE  WRITE_ALLOWED_FLAG 		VARCHAR2(1)
  BASE  SITE_ENABLED_FLAG 		VARCHAR2(1)
  BASE  SITE_UPDATE_ALLOWED_FLAG 	VARCHAR2(1)
  BASE  APP_ENABLED_FLAG 		VARCHAR2(1)
  BASE  APP_UPDATE_ALLOWED_FLAG 	VARCHAR2(1)
  BASE  RESP_ENABLED_FLAG 		VARCHAR2(1)
  BASE  RESP_UPDATE_ALLOWED_FLAG 	VARCHAR2(1)
  BASE  USER_ENABLED_FLAG 		VARCHAR2(1)
  BASE  USER_UPDATE_ALLOWED_FLAG 	VARCHAR2(1)
  BASE  START_DATE_ACTIVE 		VARCHAR2(10)
  BASE  END_DATE_ACTIVE 		VARCHAR2(10)
  BASE  SQL_VALIDATION 			VARCHAR2(2000)
  BASE  HIERARCHY_TYPE			VARCHAR2(8)
  BASE  SERVER_ENABLED_FLAG		VARCHAR2(1)
  BASE  SERVER_UPDATE_ALLOWED_FLAG	VARCHAR2(1)
  BASE  ORG_ENABLED_FLAG		VARCHAR2(1)
  BASE  ORG_UPDATE_ALLOWED_FLAG		VARCHAR2(1)

  DEFINE FND_PROFILE_OPTION_VALUES
    KEY   LEVEL			 	VARCHAR2(50)
    KEY   LEVEL_VALUE			VARCHAR2(4000)
    KEY   LEVEL_VALUE_APP		VARCHAR2(50)		
    CTX   OWNER                         VARCHAR2(4000)
    BASE  LAST_UPDATE_DATE              VARCHAR2(10)
    BASE  PROFILE_OPTION_VALUE		VARCHAR2(240)

  END FND_PROFILE_OPTION_VALUES
END PROFILE

DEFINE FND_PROFILE_CATS
  KEY NAME				VARCHAR2(80)
  CTX APPLICATION_SHORT_NAME            VARCHAR2(50)
  CTX OWNER                             VARCHAR2(4000)
  BASE ENABLED                          VARCHAR2(1)
  BASE LAST_UPDATE_DATE                 VARCHAR2(10)
  TRANS DESCRIPTION                     VARCHAR2(4000)
  TRANS DISPLAY_NAME                    VARCHAR2(80)
END FND_PROFILE_CATS

DEFINE FND_PROFILE_CAT_OPTIONS
  KEY PROFILE_OPTION_APP_NAME   	VARCHAR2(80)
  KEY PROFILE_OPTION_NAME   		    VARCHAR2(80)
  BASE CATEGORY_NAME			    VARCHAR2(30)
  BASE DISPLAY_SEQUENCE			    VARCHAR2(50)
  BASE DISPLAY_TYPE			    VARCHAR2(30)
  CTX OWNER                             VARCHAR2(4000)
  BASE LAST_UPDATE_DATE                 VARCHAR2(10)
  TRANS DESCRIPTION_OVERRIDE            VARCHAR2(4000)
END FND_PROFILE_CAT_OPTIONS


DOWNLOAD PROFILE
  "  select  o.PROFILE_OPTION_NAME,  
             substrb(fnd_load_util.owner_name(o.LAST_UPDATED_BY),1,7) OWNER,
	     to_char(o.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
             a.APPLICATION_SHORT_NAME,  
             o.USER_PROFILE_OPTION_NAME,  
             o.DESCRIPTION,  
             o.USER_CHANGEABLE_FLAG,  
             o.USER_VISIBLE_FLAG,  
             o.READ_ALLOWED_FLAG,  
             o.WRITE_ALLOWED_FLAG,  
             o.SITE_ENABLED_FLAG,  
             o.SITE_UPDATE_ALLOWED_FLAG,  
             o.APP_ENABLED_FLAG,  
             o.APP_UPDATE_ALLOWED_FLAG,  
             o.RESP_ENABLED_FLAG,  
             o.RESP_UPDATE_ALLOWED_FLAG,  
             o.USER_ENABLED_FLAG,  
             o.USER_UPDATE_ALLOWED_FLAG,  
       	     TO_CHAR(o.START_DATE_ACTIVE, 'YYYY/MM/DD') START_DATE_ACTIVE,  
             TO_CHAR(o.END_DATE_ACTIVE, 'YYYY/MM/DD') END_DATE_ACTIVE,  
             o.SQL_VALIDATION,  
             o.HIERARCHY_TYPE,
             o.SERVER_ENABLED_FLAG,
             o.SERVER_UPDATE_ALLOWED_FLAG,
             o.ORG_ENABLED_FLAG,
             o.ORG_UPDATE_ALLOWED_FLAG
     from    fnd_profile_options_vl o,  
             fnd_application a  
     where   o.application_id = a.application_id  
     and     (:PROFILE_NAME is null or
                (:PROFILE_NAME is not null 
                    and o.profile_option_name like :PROFILE_NAME))
     and     (:APPLICATION_SHORT_NAME is null or
                (:APPLICATION_SHORT_NAME is not null 
                  and a.application_short_name like :APPLICATION_SHORT_NAME)) "

  DOWNLOAD FND_PROFILE_OPTION_VALUES
  "    select TO_CHAR(ov.LEVEL_ID),  
              decode(ov.LEVEL_ID,  
   	         10001, '** Site **',  
      	         10002, pla.application_short_name,  
                 10003, plr.responsibility_key,  
                 10004, plu.user_name,  
                 10005, pln.node_name,
                 10006, plo.name,
       	      'Unsupported level - '||ov.LEVEL_ID), 
              la.application_short_name,  
              fnd_load_util.owner_name(ov.LAST_UPDATED_BY) OWNER,
	      to_char(ov.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
              ov.PROFILE_OPTION_VALUE  
       from   fnd_profile_option_values ov,  
              fnd_profile_options o,  
              fnd_application la,  
              fnd_user plu,  
              fnd_responsibility plr,  
              fnd_application pla,  
              hr_operating_units plo, 
              fnd_nodes pln
       where  o.profile_option_id = ov.profile_option_id  
/* 
*    CUSTOMIZACIONES_ARGENTINA
*    comentado para no bajar los valores asignados al perfil
*/
       and    1=2
       and    o.application_id = ov.application_id  
       and    o.profile_option_name = :PROFILE_NAME  
       and    la.application_id (+) = ov.level_value_application_id  
       and    ov.level_value = pla.application_id (+)  
       and    ov.level_value = plu.user_id (+)  
       and    ov.level_value = plr.responsibility_id (+)  
       and    ov.level_value = plo.organization_id (+)
       and    ov.level_value_application_id = plr.application_id (+) 
       and    ov.level_value = pln.node_id (+) "

DOWNLOAD FND_PROFILE_CATS
  "  select  P.NAME,
             A.APPLICATION_SHORT_NAME,
             fnd_load_util.owner_name(P.LAST_UPDATED_BY) OWNER,
             P.ENABLED,
             to_char(P.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
             P.DESCRIPTION,
	     P.DISPLAY_NAME
     from    fnd_profile_cats_vl p,
             fnd_application a
     where   p.application_id = a.application_id
     and   (:NAME is null or
                (:NAME is not null
                    and name like :NAME)) "

DOWNLOAD FND_PROFILE_CAT_OPTIONS
  "  select  A.APPLICATION_SHORT_NAME,
             P.PROFILE_OPTION_NAME,
             O.CATEGORY_NAME,
             O.DISPLAY_SEQUENCE,
             O.DISPLAY_TYPE,
             fnd_load_util.owner_name(o.LAST_UPDATED_BY) OWNER,
             to_char(o.LAST_UPDATE_DATE, 'YYYY/MM/DD') LAST_UPDATE_DATE,
             O.DESCRIPTION_OVERRIDE
     from    fnd_profile_cat_options_vl o,
             fnd_application a,
             fnd_profile_options p
     where   o.profile_option_application_id = a.application_id
       and   p.profile_option_id = o.profile_option_id 
       and   (:PROFILE_OPTION_APP_NAME is null or
                (:PROFILE_OPTION_APP_NAME is not null
                    and a.application_short_name like :PROFILE_OPTION_APP_NAME)) 
       and   (:PROFILE_OPTION_NAME is null or
                (:PROFILE_OPTION_NAME is not null
                    and p.profile_option_name like :PROFILE_OPTION_NAME)) 
"


UPLOAD PROFILE
  BEGIN
  "begin 
    if (:UPLOAD_MODE = 'NLS') then  
      fnd_profile_options_pkg.TRANSLATE_ROW (  
        :PROFILE_NAME,  
        :OWNER,  
        :USER_PROFILE_OPTION_NAME,  
        :DESCRIPTION,
        :CUSTOM_MODE,
        :LAST_UPDATE_DATE);  
    else
      fnd_profile_options_pkg.LOAD_ROW (
        :PROFILE_NAME,
        :OWNER,
        :APPLICATION_SHORT_NAME,
        :USER_PROFILE_OPTION_NAME,
        :DESCRIPTION,
        :USER_CHANGEABLE_FLAG,
        :USER_VISIBLE_FLAG,
        :READ_ALLOWED_FLAG,
        :WRITE_ALLOWED_FLAG,
        :SITE_ENABLED_FLAG,
        :SITE_UPDATE_ALLOWED_FLAG,
        :APP_ENABLED_FLAG,
        :APP_UPDATE_ALLOWED_FLAG,
        :RESP_ENABLED_FLAG,
        :RESP_UPDATE_ALLOWED_FLAG,
        :USER_ENABLED_FLAG,
        :USER_UPDATE_ALLOWED_FLAG,
        :START_DATE_ACTIVE,
        :END_DATE_ACTIVE,
        :SQL_VALIDATION,
        :HIERARCHY_TYPE,
        :CUSTOM_MODE,
        :LAST_UPDATE_DATE,
        :SERVER_ENABLED_FLAG,
        :SERVER_UPDATE_ALLOWED_FLAG,
        :ORG_ENABLED_FLAG,
        :ORG_UPDATE_ALLOWED_FLAG
      );
    end if;
  end;"

UPLOAD FND_PROFILE_OPTION_VALUES
  "declare 
     app_id    number := 0;  
     profo_id  number := 0;  
     levval_id number := 0;  
     lapp_id   number := null;
     f_luby    number;  -- entity owner in file
     f_ludate  date;    -- entity update date in file
     db_luby   number;  -- entity owner in db
     db_ludate date;    -- entity update date in db
     found     varchar2(1);
   begin  
     if (:UPLOAD_MODE = 'NLS') then
       return;
     end if;
     
     if (:LEVEL = '10001') then  
       levval_id := 0;  
     elsif (:LEVEL = '10002') then  
      begin
       select application_id into levval_id  
       from   fnd_application  
       where  application_short_name = :LEVEL_VALUE;  
      exception
        when no_data_found then
          return;
      end;
     elsif (:LEVEL = '10003') then  
       select application_id into lapp_id  
       from   fnd_application  
       where  application_short_name = :LEVEL_VALUE_APP;  
     
       select responsibility_id into levval_id  
       from   fnd_responsibility  
       where  application_id = lapp_id  
       and    responsibility_key = :LEVEL_VALUE;  
     elsif (:LEVEL = '10005') then
       select server_id into levval_id
       from fnd_nodes
       where node_name = :LEVEL_VALUE;
     elsif (:LEVEL = '10006') then
       select organization_id into levval_id  
       from hr_operating_units
       where name = :LEVEL_VALUE;
     else  
       begin
       select user_id into levval_id  
       from   fnd_user  
       where  user_name = :LEVEL_VALUE;  
       exception
         when no_data_found then
           fnd_message.set_name('FND', 'FND_INVALID_USER');
           fnd_message.set_token('USER_NAME', :LEVEL_VALUE);
           return;
       end;
     end if;  

     select profile_option_id, application_id  
     into   profo_id, app_id 
     from   fnd_profile_options  
     where  profile_option_name = :PROFILE_NAME;  
       
     f_luby := fnd_load_util.owner_id(:OWNER);
     f_ludate := nvl(to_date(:LAST_UPDATE_DATE, 'YYYY/MM/DD'), sysdate);

     begin
       --
       -- This section should never perform updates to existing 
       -- data unless CUSTOM_MODE is equal to FORCE
       --

      if (:LEVEL = '10003') then
       select LAST_UPDATED_BY, LAST_UPDATE_DATE
         into db_luby, db_ludate
       from   FND_PROFILE_OPTION_VALUES
       where  PROFILE_OPTION_ID = profo_id
       and    APPLICATION_ID = app_id
       and    LEVEL_ID = 10003 
       and    LEVEL_VALUE_APPLICATION_ID = lapp_id  
       and    LEVEL_VALUE = levval_id;
      else 
       -- Check for incorrect rows.
       -- If found, delete them and record error message.
       declare
            l_count number;
       begin
            select count(*) into l_count
            from   FND_PROFILE_OPTION_VALUES
            where  PROFILE_OPTION_ID = profo_id
            and    APPLICATION_ID = app_id
            and    LEVEL_ID = to_number(:LEVEL)
            and    LEVEL_VALUE = levval_id
            and    LEVEL_VALUE_APPLICATION_ID is not null;  

            if l_count > 0  then
              fnd_message.set_name('FND', 'FND_GENERIC_MESSAGE');
              fnd_message.set_token('MESSAGE', 
                'Warning: Invalid profile values were found at level '
                 ||  :LEVEL || ' for profile ' || :PROFILE_NAME
                 || '. Deleting invalid values.');

              delete from FND_PROFILE_OPTION_VALUES
              where  PROFILE_OPTION_ID = profo_id
              and    APPLICATION_ID = app_id
              and    LEVEL_ID = to_number(:LEVEL)
              and    LEVEL_VALUE = levval_id
              and    LEVEL_VALUE_APPLICATION_ID is not null;  

            end if;
       end;

       select LAST_UPDATED_BY, LAST_UPDATE_DATE
         into db_luby, db_ludate
       from   FND_PROFILE_OPTION_VALUES
       where  PROFILE_OPTION_ID = profo_id
       and    APPLICATION_ID = app_id
       and    LEVEL_ID = to_number(:LEVEL) 
       and    LEVEL_VALUE = levval_id
       and    LEVEL_VALUE_APPLICATION_ID is null;  
      end if;

       if (db_luby = 0) then
           db_luby := -1;
       end if;

       if (fnd_load_util.upload_test(f_luby, f_ludate, db_luby,
                                       db_ludate, :CUSTOM_MODE)) then
         update fnd_profile_option_values 
         set   profile_option_value = :PROFILE_OPTION_VALUE,  
               last_update_date = f_ludate,
               last_updated_by = f_luby,  
               last_update_login = 0  
         where application_id = app_id  
           and profile_option_id = profo_id  
           and level_id = to_number(:LEVEL)  
           and nvl(level_value_application_id, 1) =  
                   decode(:LEVEL, '10003', lapp_id, 1)  
           and level_value = levval_id;
       end if;
     exception
       when no_data_found then
         insert into fnd_profile_option_values (
           application_id,
           profile_option_id,
           level_id,
           level_value,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by,
           last_update_login,
           profile_option_value,
           level_value_application_id )
         values (
           app_id,
           profo_id,
           to_number(:LEVEL),
           levval_id,
           f_ludate,
           f_luby,
           f_ludate,
           f_luby,
           0,
           :PROFILE_OPTION_VALUE,
           decode(:LEVEL, '10003', lapp_id, null));
     end;
   end;"

UPLOAD FND_PROFILE_CATS
"begin
  if (:UPLOAD_MODE = 'NLS') then
     fnd_profile_cats_pkg.TRANSLATE_ROW(
     :NAME,
     :DESCRIPTION,
     :DISPLAY_NAME,
     :CUSTOM_MODE,
     :OWNER,
     :LAST_UPDATE_DATE);
   else
     fnd_profile_cats_pkg.LOAD_ROW(
     :NAME,
     :DESCRIPTION,
     :DISPLAY_NAME,
     :ENABLED,
     :APPLICATION_SHORT_NAME,
     :OWNER,
     :CUSTOM_MODE,
     :LAST_UPDATE_DATE);
   end if;
end;"

UPLOAD FND_PROFILE_CAT_OPTIONS
"begin
  if (:UPLOAD_MODE = 'NLS') then
     fnd_profile_cat_options_pkg.TRANSLATE_ROW(
     :PROFILE_OPTION_APP_NAME,
     :PROFILE_OPTION_NAME,
     :CATEGORY_NAME,
     :DESCRIPTION_OVERRIDE,
     :CUSTOM_MODE,
     :OWNER,
     :LAST_UPDATE_DATE);
   else
     fnd_profile_cat_options_pkg.LOAD_ROW(
     :PROFILE_OPTION_APP_NAME,
     :PROFILE_OPTION_NAME,
     :CATEGORY_NAME,
     :DISPLAY_SEQUENCE,
     :DISPLAY_TYPE,
     :DESCRIPTION_OVERRIDE,
     :OWNER,
     :CUSTOM_MODE,
     :LAST_UPDATE_DATE);
   end if;
end;"

