#!/usr/bin/env perl
# +=======================================================================+
# |          Copyright (c) 2004 Oracle Argentina, Buenos Aires            |
# |                         All rights reserved.                          |
# +=======================================================================+
# | FILENAME                                                              |
# |    xxadpatch                                                          |
# |                                                                       |
# | DESCRIPTION                                                           |
# |    Script de instalacion de patches                                   |
# |                                                                       |
# | VERSION                                                               |
# |    3.0                                                                |
# |                                                                       |
# | HISTORY                                                               |
# |    06-JUL-2004    Gaston Martino    Creado                            |
# |    17-NOV-2004    Gaston Martino    Liberada v1.3                     |
# |    15-JUN-2005    Gaston Martino    Liberada v2.0                     |
# |    23-FEB-2006    Fernando Barros   Pasados a Perl Liberada v3.0      |
# |                                                                       |
# +=======================================================================+



# ------------------------------------------------------------------------
# Definicion de variables de entorno genericas
# ------------------------------------------------------------------------
$L_PROGRAM_NAME="xxbuildpatch";
$EXIT_CODE_OK=0;
$EXIT_CODE_ERROR=1;
$DEFAULT_PATCH_DIR=$ENV{"XBOL_TOP"}."/patches";
$ARGUMENT_ERROR_FLAG="N";

# ---------------------------------------------------------------------- #
#                                                                        #
#                  P R O G R A M A    P R I N C I P A L                  #
#                                                                        #
# ---------------------------------------------------------------------- #


# ------------------------------------------------------------------------
#
# PASO 1:
# OBTENCION Y VALIDACION DE LOS ARGUMENTOS
# Recuperacion y validacion de cada uno de los argumentos recibidos
# como parametro
#
# ------------------------------------------------------------------------


$i = 0;

# --------------------------------------------------------------------------
# Recupero los argumentos recibidos como parametro
# --------------------------------------------------------------------------
while ( $ARGV[$i] ) {

   if ($ARGV[$i] eq "-h")  {
      ShowUsage();
      exit $EXIT_CODE_OK;
   } elsif ($ARGV[$i] eq "-l") {
      if ( ! $DRIVERFILE) {
         $LOGFILE=$ARGV[$i+1];
      } else {
         $ARGUMENT_ERROR_FLAG="Y";
      }
      $i = $i + 2;

   } elsif ($ARGV[$i] eq "-t" ) {
      if ( ! $DRIVERFILE ) {
         $TMP_DIR=$ARGV[$i+1];
      } else {
         $ARGUMENT_ERROR_FLAG="Y";
      }
      $i = $i + 2;

   } elsif ($ARGV[$i] eq "-p" ) {
      if ( ! $DRIVERFILE ) {
         $PATCH_DIR=$ARGV[$i+1];
      } else {
         $ARGUMENT_ERROR_FLAG="Y";
      }
      $i = $i + 2;

   } else {

      if ( ! $DRIVERFILE ) {
         $DRIVERFILE = $ARGV[$i];
         $PATCHNAME  = $ARGV[$i+1];
         if (! $PATCHNAME) {
            $ARGUMENT_ERROR_FLAG="Y";
         } else {
            $i++;
         }
      } else {

         $ARGUMENT_ERROR_FLAG="Y";
      }
      $i++;
   }
}


# ------------------------------------------------------------------------
# Verifico que los argumentos pasados sean correctos
# ------------------------------------------------------------------------
if ( $ARGUMENT_ERROR_FLAG eq "Y" ) {
   print "$L_PROGRAM_NAME: ERROR: Los argumentos recibidos son invalidos.\n";
   ShowUsage ();
   exit $EXIT_CODE_ERROR;
}


# ------------------------------------------------------------------------
# PARAMETRO: DRIVER FILE NAME
# Definicion y verificacion del nombre del archivo driver
# ------------------------------------------------------------------------
if ( ! $DRIVERFILE ) {
    print "$L_PROGRAM_NAME: ERROR: No se especifico el driver de instalacion.\n";
    ShowUsage();
    exit $EXIT_CODE_ERROR;
}

if ( ! -f $DRIVERFILE ) {
    print "$L_PROGRAM_NAME: ERROR: No se encontro el driver de instalacion indicado ($DRIVERFILE).\n";
    ShowUsage();
    exit $EXIT_CODE_ERROR;
}



# ------------------------------------------------------------------------
# PARAMETRO: LOG FILE NAME
# Definicion del archivo para logs
# ------------------------------------------------------------------------
if ( ! $LOGFILE ) {
    $LOGFILE=$DRIVERFILE;
    $LOGFILE=~s/\.drv/\.log/;
}

if ( ! -f $LOGFILE ) {
    open (LOGFH, ">$LOGFILE") || die "ERROR: No se pudo crear el archivo de log\n Archivo Log: $LOGFILE\n";
} else {
    open (LOGFH, ">>$LOGFILE") || die "ERROR: No se pudo crear el archivo de log\n Archivo Log: $LOGFILE\n";
}

# ------------------------------------------------------------------------
# PARAMETRO: PATCH DIRECTORY
# Definicion del directorio para almacenar los patches
# ------------------------------------------------------------------------
if ( ! $PATCH_DIR ) {
      $PATCH_DIR=$DEFAULT_PATCH_DIR;
}

if ( ! -d $PATCH_DIR ) {
   print "ERROR: No se pudo definir el directorio de patches\n";
   print "Directorio: $PATCH_DIR\n";
   exit $EXIT_CODE_ERROR;
}


# ------------------------------------------------------------------------
# PARAMETRO: TEMPORARY DIRECTORY
# Definicion del directorio para almacenar los archivos temporales
# ------------------------------------------------------------------------
if ( ! $TMP_DIR ) {
    if ( $ENV{"APPLTMP"} ) {
        $TMP_DIR=$ENV{"APPLTMP"};
        if ( ! -d $TMP_DIR ) {
            $TMP_DIR="/tmp";
        }
    } else {
        $TMP_DIR="/tmp";
    }
}

if ( ! -d $TMP_DIR ) {
    print "ERROR: No se pudo definir el directorio temporal\n";
    print "Directorio: $TMP_DIR\n";
    exit $EXIT_CODE_ERROR;
}
$TMPFILE="$TMP_DIR/$L_PROGRAM_NAME";


# ------------------------------------------------------------------------
#
# PASO 3:
# GENERACION DE METASCRIPT PARA EJECUTAR LOS COMANDOS DEL DRIVER
# Genero un metascript en el directorio temporal en base a los comandos
# contenidos en el archivo driver
#
# ------------------------------------------------------------------------



# ------------------------------------------------------------------------
# Genero el encabezado del script con las rutinas a utilizar
# ------------------------------------------------------------------------
open (TMPFH, "> $TMPFILE.$$");

print TMPFH "#!/usr/bin/perl -w
# -------------------------------------------------------------
#
# Routine    : PrintLine
# Purpose    : Imprime un texto por pantalla y en el log
# Parameters : l_text_line : Texto a imprimir
#              l_log_file  : Archivo de log
#
# -------------------------------------------------------------
sub PrintLine {
       print \" \$TEXT_LINE \\n\";
       print LOGFH \" \$TEXT_LINE \\n\";
}
";


print TMPFH "
# --------------------------------------------------------------
#
# Routine    : CheckDirectory
# Purpose    : Verifica si el directorio existe. Sino lo crea
# Parameters : TARGET_DIR : Directorio destino a verificar
#
# --------------------------------------------------------------
sub CheckDirectory {
    local \$LOCAL_TARGET_DIR=\$TARGET_DIR;
    chomp \$LOCAL_TARGET_DIR;
    if ( ! -d \$LOCAL_TARGET_DIR ) {
        \$TARGET_DIR=\`dirname \$LOCAL_TARGET_DIR\`;
        \$l_result = CheckDirectory();
        if ( \$l_result ) {
            \$TARGET_DIR=\$LOCAL_TARGET_DIR;
            return \$EXIT_CODE_ERROR;
        }
        mkdir \$LOCAL_TARGET_DIR;
    }
    \$TARGET_DIR=\$LOCAL_TARGET_DIR;
    return \$EXIT_CODE_OK;
} \n";



print TMPFH "
# --------------------------------------------------------------
#
# Routine    : CopyFile
# Purpose    : Copiar fuentes a un directorio destino
# Parameters : SOURCE_FILE : Archivo fuente a copiar
#              SOURCE_DIR  : Directorio origen
#              TARGET_DIR  : Directorio destino
#              LOGFILE     : Archivo de log
#              BACKUP_FLAG : Indicador de backup
#
# --------------------------------------------------------------
sub CopyFile {

# Inicializo una variable con el time stamp
\$TMSTP=`date '+%y%m%d%H%M%S'`;

# Verifico si existe el archivo origen
if ( ! -f \$SOURCE_DIR.\"/\".\$SOURCE_FILE ) {
 \$TEXT_LINE=\"ERROR: No se puede copiar \$SOURCE_FILE a \$TARGET_DIR. No existe el archivo\";
  PrintLine();
  return \$EXIT_CODE_ERROR;
}

# Verifico si existe el directorio origen
if ( ! -d \$SOURCE_DIR ) {
 \$TEXT_LINE=\"ERROR: No se puede copiar \$SOURCE_FILE a \$TARGET_DIR. No existe el directorio origen\";
  PrintLine();
  return \$EXIT_CODE_ERROR;
}

# Verifico si existe el directorio destino
\$l_result = CheckDirectory();
if ( \$l_result ) {
    \$TEXT_LINE=\"ERROR: No se puede copiar \$SOURCE_FILE a \$TARGET_DIR. El directorio destino no existe y no puede ser creado.\";
    PrintLine();
    return \$EXIT_CODE_ERROR;
}

# Verifico si esta definido el archivo de log
if ( ! \$LOGFILE ) {
  \$TEXT_LINE=\"ERROR: No se puede copiar \$SOURCE_FILE a \$TARGET_DIR. No se definio archivo log\";
  PrintLine();
  return \$EXIT_CODE_ERROR;
}

# Verifico si es necesario hacer backup antes de copiar
if ( -f \$TARGET_DIR.\"/\".\$SOURCE_FILE ) {
    if ( \$BACKUP_FLAG ) {
        if ( \$BACKUP_FLAG eq \"Y\" || \$BACKUP_FLAG eq \"y\" ) {
            \$TEXT_LINE=\"Haciendo un backup de \$TARGET_DIR/\$SOURCE_FILE\";
            PrintLine();
            system(\"cp \$TARGET_DIR/\$SOURCE_FILE \$TARGET_DIR/\$SOURCE_FILE.\$TMSTP\");
        }
    }
}

# Copio el fuente al directorio destino
    \$TEXT_LINE=\" \";
    PrintLine();
    \$TEXT_LINE=\"### Copiando \$SOURCE_DIR/\$SOURCE_FILE a \$TARGET_DIR\";
    PrintLine();
    \$l_result = system (\"cp \$SOURCE_DIR/\$SOURCE_FILE \$TARGET_DIR\");
if ( !\$l_result ) {
    \$TEXT_LINE=\"Archivo \$SOURCE_DIR/\$SOURCE_FILE copiado exitosamente.\";
    PrintLine();
    \$TEXT_LINE=\" \";
    PrintLine();
} else {
    \$TEXT_LINE=\"ERROR: Archivo \$SOURCE_DIR/\$SOURCE_FILE no pudo ser copiado.\";
    PrintLine();
    \$TEXT_LINE=\" \";
    PrintLine();
    return \$EXIT_CODE_ERROR;
}
return \$EXIT_CODE_OK;

} \n";

# ------------------------------------------------------------------------
# INICIO DE LA GENERACION DEL METASCRIPT CON LOS COMANDOS DE EJECUCION
# En primer lugar, genero  el encabezado del metascript
# ------------------------------------------------------------------------

#
# Genero el encabezado del script a procesar
#
print TMPFH "
#-------------------------------------------------------------------------#
#                                                                         #
#                  P R O G R A M A     P R I N C I P A L                  #
#                                                                         #
#-------------------------------------------------------------------------#

#--------------------------------------------
# Definiendo variables para el procesamiento
#--------------------------------------------

\$LOGFILE=\"$LOGFILE\";
\$EXIT_CODE_OK=\"$EXIT_CODE_OK\";
\$EXIT_CODE_ERROR=\"$EXIT_CODE_ERROR\";
\$TOTAL_COPY_ERRORS=\"0\";


if ( ! -f \$LOGFILE ) {
    open (LOGFH, \">\$LOGFILE\") || die \"ERROR: No se pudo crear el archivo de log\\n Archivo Log: \$LOGFILE\\n\";
} else {
    open (LOGFH, \">>\$LOGFILE\") || die \"ERROR: No se pudo crear el archivo de log\\n Archivo Log: \$LOGFILE\\n\";
}

#----------------------------------------------
# Definiendo variables para usuarios virtuales
#----------------------------------------------
";

     # -------------------------------
     # Copio el Driver
     # -------------------------------

    print TMPFH "\$SOURCE_FILE=\"$DRIVERFILE\";\n";
    print TMPFH "\$SOURCE_DIR=\"\.\";\n";
    print TMPFH "\$TARGET_DIR=\"$PATCH_DIR"."/"."$PATCHNAME"."/\";\n";
    print TMPFH "\$l_result = CopyFile();\n";
    print TMPFH "if (\$l_result) { \n";
    print TMPFH "    \$TOTAL_COPY_ERRORS++;\n";
    print TMPFH "}\n";
    print TMPFH " \n";


# ------------------------------------------------------------------------
# Hago una primer pasada del driver para identificar los comandos copy
# ------------------------------------------------------------------------
   $NR = 0;
   open (DF, $DRIVERFILE) || die "Error al abrir el archivo $DRIVERFILE\n";
   while (defined ($line = <DF>)) {
      chomp ($line);
      # Eliminar Blancos al principio de la linea
      $line=~s/^ *//;

      # dividir la linea en campos de un vector separador=" "
      @vline = split /\s+/ , $line;
      $NF = @vline;
      $NR++;

      if ($NF) {
               #
               # Proceso cada linea del driver
               #
               if ($vline[0] eq "mergepll" ||
                       $vline[0] eq "copy" ) {

                   print TMPFH "\$SOURCE_FILE=\"$vline[3]\";\n";
                   $vline[1] =~ tr/a-z/A-Z/;
                   print TMPFH "\$SOURCE_DIR=\$ENV{\"$vline[1]_TOP\"}\.\"/$vline[2]\";\n";
                   $vline[1] =~ tr/A-Z/a-z/;
                   print TMPFH "\$TARGET_DIR=\"$PATCH_DIR"."/"."$PATCHNAME"."/"."$vline[1]"."/"."$vline[2]\";\n";
                   print TMPFH "\$l_result = CopyFile();\n";
                   print TMPFH "if (\$l_result) { \n";
                   print TMPFH "    \$TOTAL_COPY_ERRORS++;\n";
                   print TMPFH "}\n";
                   print TMPFH " \n";

               }
         }
  }

  close (DF);


print TMPFH "
#--------------------------------------------
# Fin del procesamiento
#--------------------------------------------
\$TEXT_LINE=\" \";
PrintLine();
\$TEXT_LINE=\" \";
PrintLine();
\$TEXT_LINE=\" \";
PrintLine();
\$TEXT_LINE=\"######################################################### \";
PrintLine();
\$TEXT_LINE=\"### Fin de las ejecuciones de los comandos del driver ###\";
PrintLine();
\$TEXT_LINE=\"######################################################### \";
PrintLine();
\$TEXT_LINE=\" \";
PrintLine();
\$TEXT_LINE=\" # Cantidad de Comandos con Error : \$TOTAL_COPY_ERRORS\";
PrintLine();
\$TEXT_LINE=\" \";
PrintLine();
\$TEXT_LINE=\" \";
PrintLine();
";




close (TMPFH);

# ------------------------------------------------------------------------
# Ejecuto el shell script creado anteriormente
# ------------------------------------------------------------------------
chmod 0777, "$TMPFILE.$$" ;
system ("$TMPFILE.$$");
system ("rm $TMPFILE.$$");


# ---------------------------------------------------------------------- #
#                                                                        #
#                     R U T I N A S    L O C A L E S                     #
#                                                                        #
# ---------------------------------------------------------------------- #

# --------------------------------------------------------------
#
# Routine    : ShowUsage
# Purpose    : Muestra la sintaxis de uso del shell script
# Parameters : PROGRAM_NAME: Nombre del shell script
#
# --------------------------------------------------------------

sub ShowUsage  {
   print " \n";
   print "Uso: $L_PROGRAM_NAME [<opciones>] <archivo driver>\n";
   print " \n";
   print "En donde <opciones> pueden ser:\n";
   print "  -h                      : Muestra la ayuda del programa\n";
   print "  -l <archivo log>        : Archivo de log del proceso\n";
   print "  -t <dir. temporal>      : Directorio para archivos temporales\n";
   print "  -p <dir. de patches>    : Directorio para generacion de patches [$DEFAULT_PATCH_DIR]";
   print " \n";
   print "Y los argumentos son:\n";
   print "  <archivo driver>    : Archivo tipo driver (drv) con acciones a ejecutar\n";
   print "  <patch name>        : Nombre del patch a crear\n";
   print " \n";
}
